"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_emotion_1 = __importDefault(require("react-emotion"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const OperationalContext_1 = __importDefault(require("../OperationalContext/OperationalContext"));
const Spinner_1 = __importDefault(require("../Spinner/Spinner"));
const utils_1 = require("../utils");
const constants_1 = require("../utils/constants");
const makeColors = (theme, color) => {
    const defaultColor = theme.color.white;
    const backgroundColors = {
        grey: theme.color.background.light,
        warning: defaultColor,
    };
    const textColors = {
        grey: theme.color.text.action,
        warning: theme.color.error,
    };
    const backgroundColor = backgroundColors[color] || constants_1.expandColor(theme, color) || defaultColor;
    const textColor = textColors[color] || utils_1.readableTextColor(backgroundColor, [theme.color.text.default, theme.color.white]);
    return {
        background: backgroundColor,
        foreground: textColor,
    };
};
const containerStyles = ({ theme, color_, disabled, condensed, loading, fullWidth, textColor }) => {
    const { background: backgroundColor, foreground: foregroundColor } = makeColors(theme, color_ || "");
    return Object.assign({ backgroundColor, lineHeight: `${condensed ? 28 : 36}px`, label: "button", fontSize: theme.font.size.small, fontFamily: theme.font.family.main, fontWeight: theme.font.weight.medium, display: "inline-flex", alignItems: "center", justifyContent: "center", padding: `0 ${condensed ? theme.space.medium : theme.space.element}px`, borderRadius: theme.borderRadius, border: 0, boxShadow: utils_1.isWhite(backgroundColor) ? `0 0 0 1px ${theme.color.border.disabled} inset` : "none", cursor: disabled ? "not-allowed" : "pointer", opacity: disabled ? 0.6 : 1.0, outline: "none", position: "relative", width: fullWidth ? "100%" : "initial", 
        // Apply styles with increased specificity to override defaults
        "&, a:link&, a:visited&": {
            textDecoration: "none",
            color: loading ? "transparent" : constants_1.expandColor(theme, textColor) || foregroundColor,
        } }, (!disabled
        ? {
            ":hover": {
                backgroundColor: utils_1.darken(backgroundColor, 5),
            },
        }
        : {}), { marginRight: theme.space.small });
};
const Container = react_emotion_1.default("button")(containerStyles);
const ContainerLink = react_emotion_1.default("a")(containerStyles);
const ButtonSpinner = react_emotion_1.default(Spinner_1.default)(({ theme, containerColor }) => ({
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate3d(-50%, -50%, 0)",
    color: makeColors(theme, containerColor || "").foreground,
}));
const Button = (_a) => {
    var { to, children, icon, iconPosition, iconColor, color, onClick } = _a, props = __rest(_a, ["to", "children", "icon", "iconPosition", "iconColor", "color", "onClick"]);
    const ContainerComponent = to ? ContainerLink : Container;
    const iconProps = { name: icon, size: 18, color: iconColor };
    return (React.createElement(OperationalContext_1.default, null, ctx => (React.createElement(ContainerComponent, Object.assign({}, props, { color_: color, href: to, onClick: (ev) => {
            if (props.disabled) {
                ev.preventDefault();
                return;
            }
            if (onClick) {
                onClick();
            }
            if (!utils_1.isModifiedEvent(ev) && ctx.pushState && to && !utils_1.isOutsideLink(to)) {
                ev.preventDefault();
                ctx.pushState(to);
            }
        }, title: props.loading && children === String(children) ? String(children) : undefined }),
        icon && iconPosition === "start" && React.createElement(Icon_1.default, Object.assign({ left: true }, iconProps)),
        children,
        icon && iconPosition === "end" && React.createElement(Icon_1.default, Object.assign({ right: true }, iconProps)),
        props.loading && React.createElement(ButtonSpinner, { containerColor: color })))));
};
Button.defaultProps = {
    iconPosition: "end",
};
exports.default = Button;
//# sourceMappingURL=Button.js.map