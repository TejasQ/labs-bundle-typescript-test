"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const enzyme_1 = require("enzyme");
const React = __importStar(require("react"));
const index_1 = require("../../index");
const wrap_default_theme_1 = __importDefault(require("../../utils/wrap-default-theme"));
const Tree_utils_1 = require("../Tree.utils");
const Tree = wrap_default_theme_1.default(index_1.Tree);
describe("Tree Component", () => {
    it("Should intialize without problems", () => {
        const output = enzyme_1.render(React.createElement(Tree, { trees: [] }));
        expect(output).toMatchSnapshot();
    });
    it("Toggle path - add case", () => {
        expect(Tree_utils_1.togglePath([1, 2])([[1, 2, 3], [0]])).toEqual([[1, 2, 3], [0], [1, 2]]);
    });
    it("Toggle path - remove case", () => {
        expect(Tree_utils_1.togglePath([1, 2])([[1, 2], [0]])).toEqual([[0]]);
    });
    it("Works out initially open paths", () => {
        expect(Tree_utils_1.getInitialOpenPaths([])({
            label: "",
            initiallyOpen: true,
            childNodes: [
                {
                    label: "",
                    initiallyOpen: false,
                    childNodes: [
                        {
                            label: "",
                            initiallyOpen: true,
                            childNodes: [],
                        },
                    ],
                },
                {
                    label: "",
                    initiallyOpen: true,
                    childNodes: [],
                },
            ],
        })).toEqual([[], [0, 0], [1]]);
    });
    it("Calculates depth of a single-node tree", () => {
        expect(Tree_utils_1.getDepth({ label: "", childNodes: [] })).toEqual(1);
    });
    it("Calculates depth of a complex tree", () => {
        expect(Tree_utils_1.getDepth({
            label: "",
            childNodes: [{ label: "", childNodes: [] }, { label: "", childNodes: [{ label: "", childNodes: [] }] }],
        })).toEqual(3);
    });
});
//# sourceMappingURL=Tree.test.js.map