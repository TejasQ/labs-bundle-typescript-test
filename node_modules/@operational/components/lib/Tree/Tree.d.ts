import * as React from "react";
import { DefaultProps } from "../types";
import { Tree as ITree } from "./Tree.types";
export interface TreeProps extends DefaultProps {
    /** An array of tree structures */
    trees: ITree[];
    /** A flag toggling drag-and-drop reordering of tree items */
    onReorder?: (source: number[], target: number[]) => void;
}
export interface State {
    /** Stores all open paths. E.g. if this.state.openPaths is [ [ 0 ], [ 1, 2 ] ], then the first root, and the third child of the second root are open.  */
    openPaths: number[][];
    reorderSource?: number[];
    reorderTarget?: number[];
}
export interface ReorderProps {
    onReorder: TreeProps["onReorder"];
    reorderSource?: number[];
    reorderTarget?: number[];
    setReorderSource: (reorderSourcePath?: number[]) => void;
    setReorderTarget: (reorderTargetPath?: number[]) => void;
}
declare class Tree extends React.Component<TreeProps, State> {
    readonly state: State;
    private getOpenPaths;
    componentDidUpdate(prevProps: TreeProps): void;
    private togglePath;
    private setReorderSource;
    private setReorderTarget;
    render(): JSX.Element;
}
export default Tree;
