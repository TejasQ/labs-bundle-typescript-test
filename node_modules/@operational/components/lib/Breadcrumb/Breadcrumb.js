"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const OperationalContext_1 = __importDefault(require("../OperationalContext/OperationalContext"));
const utils_1 = require("../utils");
const styled_1 = __importDefault(require("../utils/styled"));
const containerStyles = {
    label: "breadcrumb",
    "& svg": {
        marginLeft: 4,
    },
};
const Container = styled_1.default("span")(containerStyles);
const ContainerLink = styled_1.default("a")(containerStyles, ({ theme }) => ({
    "&:link, &:visited": {
        color: theme.color.primary,
        borderBottom: "1px solid currentColor",
        "&:hover": {
            color: utils_1.darken(theme.color.primary, 5),
        },
    },
}));
const Content = styled_1.default("span")();
const Breadcrumb = (_a) => {
    var { to, icon, onClick } = _a, props = __rest(_a, ["to", "icon", "onClick"]);
    const ContainerComponent = to ? ContainerLink : Container;
    return (React.createElement(OperationalContext_1.default, null, ctx => (React.createElement(ContainerComponent, Object.assign({}, props, { href: to, onClick: (ev) => {
            if (onClick) {
                onClick(ev);
            }
            if (!utils_1.isModifiedEvent(ev) && ctx.pushState && to && !utils_1.isOutsideLink(to)) {
                ev.preventDefault();
                ctx.pushState(to);
            }
        } }),
        React.createElement(Content, null, props.children),
        icon && React.createElement(Icon_1.default, { name: icon, size: 12 })))));
};
exports.default = Breadcrumb;
//# sourceMappingURL=Breadcrumb.js.map