"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Default theme definition
const colors = {
    brand: "#000000",
    info: "#1499CE",
    success: "#00BF3C",
    warning: "#FFAE00",
    error: "#DE1A1A",
    white: "#FFFFFF",
    black: "#000000",
    visualizationPalette: [
        "#2ca02c",
        "#1f77b4",
        "#ff7f0e",
        "#d62728",
        "#9467bd",
        "#17becf",
        "#7f7f7f",
        "#e377c2",
        "#8c564b",
        "#bcbd22",
        "#98df8a",
        "#aec7e8",
        "#ffbb78",
        "#ff9896",
        "#c5b0d5",
        "#9edae5",
        "#c7c7c7",
        "#f7b6d2",
        "#c49c94",
        "#dbdb8d",
    ],
    lightGray: "#e8e8e8",
    gray: "#999999",
    background: "#F5F6FA",
    lighterBackground: "#F9FAFE",
    text: "#2F3435",
    border: "#ADADAD",
    inputBorder: "#D0D9E5",
    lightText: "#969696",
    linkText: "#1499CE",
    navBackground: "#004A75",
    separator: "#f2f2f2",
};
const baseTypography = {
    lineHeight: "1.5",
    textTransform: "none",
    letterSpacing: "normal",
};
const typography = {
    title: Object.assign({}, baseTypography, { fontSize: 24, fontWeight: 400 }),
    heading1: Object.assign({}, baseTypography, { fontSize: 16, fontWeight: 400 }),
    heading2: Object.assign({}, baseTypography, { fontSize: 16, opacity: 0.7, fontWeight: 400 }),
    body: Object.assign({}, baseTypography, { fontSize: 13, fontWeight: 400 }),
    small: Object.assign({}, baseTypography, { fontSize: 12, fontWeight: 400 }),
};
const shadows = {
    pressed: "inset 0 1px 1px rgba(0,0,0,0.15)",
    card: "0px 1px 5px #d3d1d1",
    focus: "inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(82,168,236,.6)",
    popup: "0 3px 12px rgba(0, 0, 0, .14)",
};
const operational = {
    typography,
    shadows,
    colors,
    spacing: 16,
    box: 72,
    borderRadius: 4,
    fontFamily: "Helvetica Neue, Helvetica, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'",
    baseZIndex: 0,
};
exports.operational = operational;
/*
 * This version is for use with the old theme, and is deprecated in favour of the new one
 */
/*
 * Expands a color expressed either as a custom hex value
 * or a color key to pick from within the theme.colors object.
 */
exports.expandColor = (theme, color) => {
    if (!color) {
        return null;
    }
    const hexRegEx = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|currentColor/i;
    const isHex = hexRegEx.test(color);
    if (isHex) {
        return color;
    }
    // || null is necessary to coerce undefineds into nulls
    return theme.colors[color] || null;
};
//# sourceMappingURL=deprecatedTheme.js.map