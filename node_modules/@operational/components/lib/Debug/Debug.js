"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_copy_to_clipboard_1 = __importDefault(require("react-copy-to-clipboard"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const Tooltip_1 = __importDefault(require("../Tooltip/Tooltip"));
const styled_1 = __importDefault(require("../utils/styled"));
const makeRowsFromConfig_1 = require("./makeRowsFromConfig");
const Container = styled_1.default("div") `
  position: fixed;
  bottom: ${({ theme }) => theme.space.element}px;
  right: ${({ theme }) => theme.space.element}px;
  width: fit-content;
  display: grid;
  grid-template-rows: 40px auto;
  background: rgba(0, 0, 0, 0.7);
  -webkit-backdrop-filter: blur(10px);
  backdrop-filter: blur(10px);
  color: white;
  z-index: ${({ theme }) => theme.zIndex.debugViewer};
`;
const Header = styled_1.default("div") `
  padding: 0 ${({ theme }) => theme.space.content}px;
  display: flex;
  align-items: center;
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  font-weight: ${({ theme }) => theme.font.weight.bold};
  cursor: pointer;
`;
const ConfigTableContainer = styled_1.default("div") `
  overflow: auto;
  max-height: 80vh;
  -webkit-overflow-scrolling: touch;
`;
const ConfigTable = styled_1.default("table") `
  font: inherit;
  color: inherit;

  td {
    padding: ${({ theme }) => `${theme.space.small}px ${theme.space.content}px`};
  }

  td:nth-child(odd) {
    font-weight: ${({ theme }) => theme.font.weight.medium};
  }
`;
const Icons = styled_1.default("div") `
  position: relative;
  margin-left: auto;
  display: flex;
  align-items: center;

  svg + svg {
    margin-left: ${({ theme }) => theme.space.small}px;
  }
`;
const Title = styled_1.default("span") `
  display: inline-block;
  margin-right: ${({ theme }) => theme.space.element}px;
`;
class Debug extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            isExpanded: this.props.expanded,
            copied: false,
        };
        this.dragStart = (event) => {
            event.persist();
            const style = window.getComputedStyle(event.currentTarget, null);
            this.setState(() => ({
                contextLeft: parseInt(style.getPropertyValue("left"), 10) - event.clientX,
                contextTop: parseInt(style.getPropertyValue("top"), 10) - event.clientY,
            }));
        };
        this.drop = (event) => {
            event.persist();
            event.preventDefault();
            const { contextTop, contextLeft } = this.state;
            if (typeof contextLeft === "undefined") {
                return;
            }
            if (typeof contextTop === "undefined") {
                return;
            }
            this.setState(() => ({
                left: event.clientX + contextLeft,
                top: event.clientY + contextTop,
            }));
        };
        this.dragOver = (event) => event.preventDefault();
        this.toggle = () => this.setState(({ isExpanded }) => ({ isExpanded: !isExpanded }));
        this.showCopyFeedback = () => {
            this.setState(() => ({ copied: true }));
            setTimeout(() => this.setState(() => ({ copied: false })), 1000);
        };
    }
    render() {
        const { title: debugTitle, values } = this.props;
        const { isExpanded, top, left, copied } = this.state;
        return (React.createElement(Container
        /**
         * We initially style the component to be relative to the bottom and the right.
         * Once we have a top and left position, reset the bottom and the right.
         */
        , { 
            /**
             * We initially style the component to be relative to the bottom and the right.
             * Once we have a top and left position, reset the bottom and the right.
             */
            style: top && left ? { top, left, bottom: "initial", right: "initial" } : {}, draggable: true, onDragStart: this.dragStart, onDragOver: this.dragOver, onDragEnd: this.drop, className: this.props.className },
            React.createElement(Header, { onClick: () => this.toggle() },
                React.createElement(Title, null, debugTitle),
                React.createElement(Icons, null,
                    React.createElement(react_copy_to_clipboard_1.default, { text: JSON.stringify({ currentUrl: window.location.href, debug: values }, null, 2), onCopy: this.showCopyFeedback },
                        React.createElement(Icon_1.default, { onClick: e => e.stopPropagation(), name: "Copy" })),
                    React.createElement(Icon_1.default, { name: isExpanded ? "ChevronUp" : "ChevronDown" }),
                    copied && React.createElement(Tooltip_1.default, { top: true }, "Copied"))),
            isExpanded && (React.createElement(ConfigTableContainer, null,
                React.createElement(ConfigTable, null,
                    React.createElement("tbody", null, makeRowsFromConfig_1.makeRowsFromConfig(values)))))));
    }
}
Debug.defaultProps = {
    expanded: false,
};
exports.default = Debug;
//# sourceMappingURL=Debug.js.map