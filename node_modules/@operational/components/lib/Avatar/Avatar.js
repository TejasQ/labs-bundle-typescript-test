"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const utils_1 = require("../utils");
const color_1 = require("../utils/color");
const constants_1 = require("../utils/constants");
const styled_1 = __importDefault(require("../utils/styled"));
const Container = styled_1.default("div")({
    label: "avatar",
    display: "flex",
    alignItems: "center",
    justifyContent: "flex-start",
});
const NameContainer = styled_1.default("div")({
    display: "block",
});
const Name = styled_1.default("div")({
    margin: 0,
});
const Title = styled_1.default("div")(({ theme }) => ({
    color: theme.color.text.lighter,
    margin: 0,
}));
const Picture = styled_1.default("div")({
    textTransform: "uppercase",
    borderRadius: "50%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
}, ({ theme, color, colorAssignment, photo, showName, addBorder, size }) => {
    const defaultColor = theme.color.primary;
    const fixedBackgroundColor = color ? constants_1.expandColor(theme, color) || defaultColor : defaultColor;
    const assignedBackgroundColor = colorAssignment
        ? color_1.colorMapper(theme.color.palette)(colorAssignment)
        : null;
    const backgroundColor = assignedBackgroundColor || fixedBackgroundColor;
    const textColor = utils_1.readableTextColor(backgroundColor, [theme.color.text.default, "white"]);
    // Calculate sizes based on the state of the size prop
    const sizes = size === "medium"
        ? {
            fontSize: 13,
            width: 48,
            height: 48,
        }
        : {
            fontSize: 11,
            width: 32,
            height: 32,
        };
    // Calculate background based on the state of the photo prop
    const background = photo
        ? {
            background: `url(${photo})`,
            backgroundSize: "cover",
            backgroundPosition: "50% 50%",
            color: theme.color.white,
        }
        : {
            backgroundColor,
            color: textColor,
        };
    return Object.assign({}, sizes, background, { marginRight: showName ? theme.space.small : 0, border: addBorder ? "2px solid white" : 0 });
});
const Avatar = props => {
    const initials = utils_1.getInitials(props.name);
    return (React.createElement(Container, Object.assign({}, props),
        React.createElement(Picture, { photo: props.photo, color: props.color, colorAssignment: !props.color ? props.name : undefined, showName: props.showName, size: props.size, addBorder: props.addBorder }, props.children ? props.children : props.hideInitials || props.photo ? "" : initials),
        props.showName && (React.createElement(NameContainer, null,
            React.createElement(Name, null, props.name),
            props.title && React.createElement(Title, null, props.title)))));
};
Avatar.defaultProps = {
    assignColor: true,
    addBorder: false,
    size: "small",
    onClick: () => ({}),
};
exports.default = Avatar;
//# sourceMappingURL=Avatar.js.map