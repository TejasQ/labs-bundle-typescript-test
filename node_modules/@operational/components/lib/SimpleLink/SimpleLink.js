"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_emotion_1 = __importDefault(require("react-emotion"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const OperationalContext_1 = __importDefault(require("../OperationalContext/OperationalContext"));
const utils_1 = require("../utils");
const constants_1 = require("../utils/constants");
const containerStyles = ({ theme, color_, left_, right_ }) => {
    const color = color_ ? constants_1.expandColor(theme, color_) || color_ : theme.color.primary;
    const hoverColor = utils_1.darken(color, 5);
    return {
        color,
        marginTop: 0,
        marginBottom: 0,
        marginLeft: right_ ? theme.space.base : 0,
        marginRight: left_ ? theme.space.base : 0,
        fontSize: theme.font.size.fineprint,
        fontFamily: theme.font.family.main,
        fontWeight: theme.font.weight.medium,
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        borderRadius: theme.borderRadius,
        border: 0,
        outline: "none",
        position: "relative",
        ":hover": {
            color: hoverColor,
        },
        "& > svg": {
            marginLeft: theme.space.base,
        },
    };
};
const Container = react_emotion_1.default("p")(containerStyles);
const ContainerLink = react_emotion_1.default("a")(containerStyles);
const SimpleLink = (_a) => {
    var { to, children, icon, color, onClick, left, right } = _a, props = __rest(_a, ["to", "children", "icon", "color", "onClick", "left", "right"]);
    const ContainerComponent = to ? ContainerLink : Container;
    return (React.createElement(OperationalContext_1.default, null, ctx => (React.createElement(ContainerComponent, Object.assign({}, props, { left_: left, right_: right, color_: color, href: to, onClick: (ev) => {
            if (onClick) {
                onClick();
            }
            if (!utils_1.isModifiedEvent(ev) && ctx.pushState && to && !utils_1.isOutsideLink(to)) {
                ev.preventDefault();
                ctx.pushState(to);
            }
        } }),
        children,
        icon && React.createElement(Icon_1.default, { right: true, name: icon, size: 12 })))));
};
exports.default = SimpleLink;
//# sourceMappingURL=SimpleLink.js.map