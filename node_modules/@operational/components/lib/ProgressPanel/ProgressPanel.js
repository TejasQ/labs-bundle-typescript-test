"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const styled_1 = __importDefault(require("../utils/styled"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const Spinner_1 = __importDefault(require("../Spinner/Spinner"));
const constants_1 = __importDefault(require("../utils/constants"));
const getVariation = (status, theme = constants_1.default) => {
    switch (status) {
        case "success":
        case "done":
            return {
                iconColor: theme.color.success,
                textColor: theme.color.text.default,
                icon: React.createElement(Icon_1.default, { left: true, name: "Yes" }),
            };
        case "failure":
        case "failed":
            return {
                iconColor: theme.color.error,
                textColor: theme.color.text.default,
                icon: React.createElement(Icon_1.default, { left: true, name: "No" }),
            };
        case "waiting":
        case "todo":
            return {
                iconColor: theme.color.text.lightest,
                textColor: theme.color.text.lighter,
                icon: React.createElement(Icon_1.default, { left: true, name: "EmptyCircle" }),
            };
        case "running":
            return {
                iconColor: theme.color.text.dark,
                textColor: theme.color.text.lightest,
                icon: React.createElement(Spinner_1.default, { left: true }),
            };
    }
};
const Container = styled_1.default("div") `
  display: block;

  &:not(:last-child) {
    margin-bottom: ${({ theme }) => `${theme.space.big}px`};
  }
`;
const Item = styled_1.default("div") `
  padding: 6px 0;
`;
const Body = styled_1.default("div") `
  display: flex;
  align-items: center;
  justify-content: flex-start;
  ${({ theme, status }) => `
    color: ${getVariation(status, theme).textColor};
    font-size: ${theme.font.size.body}px;
    & svg {
      color: ${getVariation(status, theme).iconColor};
    }
  `};
`;
const Error = styled_1.default("p") `
  margin: 4px 0;
  padding-left: 26px;
  ${({ theme }) => `
    font-size: ${theme.font.size.fineprint}px;
    color: ${theme.color.error};
  `};
`;
const ProgressPanel = (_a) => {
    var { items } = _a, props = __rest(_a, ["items"]);
    return (React.createElement(Container, Object.assign({}, props), items.map(({ status, title, error }, index) => (React.createElement(Item, { key: index },
        React.createElement(Body, { status: status },
            getVariation(status).icon,
            title),
        error && React.createElement(Error, null, error))))));
};
exports.default = ProgressPanel;
//# sourceMappingURL=ProgressPanel.js.map