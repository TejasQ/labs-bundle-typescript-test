"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Tabs_1 = __importStar(require("../Internals/Tabs"));
const PageArea_1 = __importDefault(require("../PageArea/PageArea"));
const PageContent_1 = __importDefault(require("../PageContent/PageContent"));
const Progress_1 = __importDefault(require("../Progress/Progress"));
const Title_1 = require("../Typography/Title");
const utils_1 = require("../utils");
const constants_1 = require("../utils/constants");
const styled_1 = __importDefault(require("../utils/styled"));
const Container = styled_1.default("div")(({ theme }) => ({
    height: "100%",
    position: "relative",
    backgroundColor: theme.color.background.lighter,
}));
const TitleBar = styled_1.default("div") `
  background-color: ${({ theme, color }) => constants_1.expandColor(theme, color) || theme.color.primary};
  color: ${({ theme, color }) => utils_1.readableTextColor(constants_1.expandColor(theme, color) || theme.color.primary, ["black", "white"])};
`;
const TitleContainer = styled_1.default("div")(({ theme }) => ({
    display: "flex",
    alignItems: "center",
    padding: theme.space.element,
    height: theme.titleHeight,
    fontWeight: theme.font.weight.medium,
}));
const ViewContainer = styled_1.default("div")(({ theme, isInTab, isTitleCondensed }) => ({
    height: `calc(100% - ${isInTab && !isTitleCondensed ? theme.titleHeight + Tabs_1.tabsBarHeight : theme.titleHeight}px)`,
    overflow: "hidden",
    position: "relative",
}));
const ActionsContainer = styled_1.default("div")(({ theme, actionPosition }) => (Object.assign({}, (actionPosition === "start"
    ? {
        order: -1,
        // Deal with the button margin (theme.space.small)
        marginRight: theme.space.element - theme.space.small,
    }
    : {
        marginLeft: theme.space.element,
    }), (actionPosition === "end"
    ? {
        flexGrow: 1,
        display: "flex",
        justifyContent: "flex-end",
    }
    : {}))));
const FixedProgress = styled_1.default(Progress_1.default) `
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
`;
const initialState = {};
class Page extends React.Component {
    constructor() {
        super(...arguments);
        this.state = initialState;
    }
    renderPageWithTabs() {
        const tabs = this.props.tabs;
        const { title, actions, actionsPosition, condensedTitle, color } = this.props;
        return (React.createElement(Tabs_1.default, { tabs: tabs, activeTabName: this.props.activeTabName, onTabChange: this.props.onTabChange, condensed: condensedTitle }, ({ tabsBar, activeChildren }) => (React.createElement(React.Fragment, null,
            title && (React.createElement(TitleBar, { color: color },
                React.createElement(TitleContainer, null,
                    React.createElement(Title_1.Title, null, title),
                    condensedTitle && tabsBar,
                    React.createElement(ActionsContainer, { actionPosition: actionsPosition }, actions)),
                !condensedTitle && tabsBar)),
            React.createElement(ViewContainer, { isInTab: true, isTitleCondensed: condensedTitle }, activeChildren)))));
    }
    renderPageWithoutTabs() {
        const { title, actions, actionsPosition, areas, color, children, fill } = this.props;
        return (React.createElement(React.Fragment, null,
            title && (React.createElement(TitleBar, { color: color },
                React.createElement(TitleContainer, null,
                    React.createElement(Title_1.Title, null, title),
                    React.createElement(ActionsContainer, { actionPosition: actionsPosition }, actions)))),
            React.createElement(ViewContainer, null,
                React.createElement(PageContent_1.default, { areas: areas, fill: fill }, modalConfirmContext => {
                    const resolvedChildren = typeof children === "function" ? children(modalConfirmContext) : children;
                    return areas === "main" ? React.createElement(PageArea_1.default, null, resolvedChildren) : resolvedChildren;
                }))));
    }
    render() {
        const _a = this.props, { tabs, fill, onTabChange, loading, title } = _a, props = __rest(_a, ["tabs", "fill", "onTabChange", "loading", "title"]);
        return (React.createElement(Container, Object.assign({}, props),
            loading && React.createElement(FixedProgress, null),
            tabs ? this.renderPageWithTabs() : this.renderPageWithoutTabs()));
    }
}
Page.defaultProps = {
    areas: "main",
    fill: false,
    actionsPosition: "main",
};
exports.default = Page;
//# sourceMappingURL=Page.js.map