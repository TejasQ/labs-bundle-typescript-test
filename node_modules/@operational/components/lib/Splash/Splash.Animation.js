"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_emotion_1 = __importDefault(require("react-emotion"));
// Number of squares in the animation grid
const squares = 16;
// Number of animating boxes
const boxes = 50;
// Return integer random between 0 and range - 1, boundaries included
const integerRandom = (range) => {
    return Math.floor(Math.random() * range);
};
// If a coordinate falls out of the (0, n - 1) range,
// bounce it back into the animation frame.
const bounce = (coord) => {
    if (coord < 0) {
        return -coord;
    }
    if (coord > squares - 1) {
        return 2 * (squares - 1) - coord;
    }
    return coord;
};
const Container = react_emotion_1.default("div")(({ size }) => ({
    width: size,
    height: size,
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate3d(-50%, -50%, 0)",
}));
const Box = react_emotion_1.default("div")(({ x, y }) => ({
    position: "absolute",
    transition: "all 0.5s ease-in-out",
    top: `calc(${(x / (squares - 1)) * 100}% + 4px)`,
    left: `calc(${(y / (squares - 1)) * 100}% + 4px)`,
    borderRadius: 6,
    width: `calc(${100 / (squares - 1)}% - 8px)`,
    height: `calc(${100 / (squares - 1)}% - 8px)`,
    backgroundColor: "rgba(255, 255, 255, 0.06)",
}));
class Animation extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            animationStep: 0,
            coordinates: Array.apply(null, { length: boxes })
                .map(Number.call, Number)
                .map(() => ({ x: integerRandom(squares), y: integerRandom(squares) })),
        };
    }
    // Shift the coordinate of every third tile in a random direction.
    // Each animation shifts a different set of tiles.
    shiftSomeTiles() {
        this.setState(prevState => ({
            animationStep: prevState.animationStep + 1,
            coordinates: prevState.coordinates.map((coord, index) => {
                if (index % 3 === prevState.animationStep % 3) {
                    const dx = integerRandom(3) - 1;
                    const dy = integerRandom(3) - 1;
                    return {
                        x: bounce(coord.x + dx),
                        y: bounce(coord.y - dy),
                    };
                }
                return coord;
            }),
        }));
    }
    componentDidMount() {
        this.animationInterval = window.setInterval(this.shiftSomeTiles.bind(this), 5000);
    }
    componentWillUnmount() {
        clearInterval(this.animationInterval);
    }
    render() {
        const size = this.props.size || 600;
        return (React.createElement(Container, { size: size }, this.state.coordinates.map((coord, index) => (React.createElement(Box, { key: index, x: coord.x, y: coord.y })))));
    }
}
exports.default = Animation;
//# sourceMappingURL=Splash.Animation.js.map