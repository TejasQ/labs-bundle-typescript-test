"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Button_1 = __importDefault(require("../Button/Button"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const styled_1 = __importDefault(require("../utils/styled"));
const PaginatorSpan = styled_1.default("div")(({ theme }) => ({
    fontFamily: theme.font.family.main,
    fontSize: theme.font.size.small,
    padding: `0 ${theme.space.content}px`,
    display: "inline-flex",
    color: theme.color.text.lighter,
    minWidth: 120,
    justifyContent: "center",
    "& span": {
        color: theme.color.text.dark,
        paddingRight: 3,
    },
}));
const NavigationButton = styled_1.default(Button_1.default)({
    width: 56,
    marginRight: 3,
    padding: 0,
    "& svg": {
        verticalAlign: "middle",
        marginTop: 1,
    },
    "& span": {
        padding: "0 3px",
    },
});
const PaginatorControl = ({ children, itemCount, itemsPerPage, page, onChange, type, isDisabled }) => {
    const pageChanges = {
        first: 1,
        previous: page - 1,
        next: page + 1,
        last: Math.ceil(itemCount / itemsPerPage),
    };
    const clickHandler = () => {
        if (onChange) {
            onChange(pageChanges[type]);
        }
    };
    return (React.createElement(NavigationButton, { disabled: isDisabled, condensed: true, onClick: clickHandler }, children));
};
const getRange = ({ page, itemCount, itemsPerPage }) => {
    const start = 1 + (page - 1) * itemsPerPage;
    const end = Math.min(itemCount, page * itemsPerPage);
    return `${start}-${end}`;
};
const Container = styled_1.default("div")(({ theme }) => ({
    label: "paginator",
    marginTop: theme.space.element,
    display: "flex",
    alignItems: "center",
}));
const Paginator = (_a) => {
    var { itemCount, itemsPerPage, page, onChange } = _a, props = __rest(_a, ["itemCount", "itemsPerPage", "page", "onChange"]);
    const controlProps = {
        itemCount,
        itemsPerPage,
        page: page,
        onChange,
    };
    const isFirstDisabled = page === 1;
    const isLastDisabled = itemsPerPage * page >= itemCount;
    return (React.createElement(Container, Object.assign({}, props),
        React.createElement(PaginatorControl, Object.assign({ type: "first" }, controlProps, { isDisabled: isFirstDisabled }), "first"),
        React.createElement(PaginatorControl, Object.assign({ type: "previous" }, controlProps, { isDisabled: isFirstDisabled }),
            React.createElement(Icon_1.default, { name: "ChevronLeft", size: 11 }),
            React.createElement("span", null, "prev")),
        React.createElement(PaginatorSpan, { key: page },
            React.createElement("span", null, getRange({ page, itemCount, itemsPerPage })),
            " of ",
            itemCount),
        React.createElement(PaginatorControl, Object.assign({ type: "next" }, controlProps, { isDisabled: isLastDisabled }),
            React.createElement("span", null, "next"),
            React.createElement(Icon_1.default, { name: "ChevronRight", size: 11 })),
        React.createElement(PaginatorControl, Object.assign({ type: "last" }, controlProps, { isDisabled: isLastDisabled }), "last")));
};
Paginator.defaultProps = {
    page: 1,
};
exports.default = Paginator;
//# sourceMappingURL=Paginator.js.map