"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const __1 = require("../");
const styled_1 = __importDefault(require("../utils/styled"));
const Container = styled_1.default("div")({
    overflow: "hidden",
    height: "100%",
    // Positioned relative to display the absolutely positioned
    // loading bar element correctly.
    position: "relative",
});
/*
 * This is the main grid of the application, splitting up the viewport in 4 cells
 * (2 columns for the header, 2 for the content), on top of which the children are laid out.
 * On these children, row and column positions are set explicitly to prevent layout bugs
 * originating from child ordering and CSS properties set on the children.
 */
const GridContainer = styled_1.default("div")({
    position: "relative",
    display: "grid",
    width: "100%",
    height: "100%",
    overflow: "hidden",
}, ({ theme }) => ({
    gridTemplateRows: `${theme.titleHeight}px 100%`,
    gridTemplateColumns: `min-content`,
}));
const Main = styled_1.default("div")(({ theme }) => ({
    overflow: "hidden",
    gridColumnEnd: "span 1",
    gridColumnStart: "2",
    gridRowStart: "2",
    gridRowEnd: "span 1",
    height: `calc(100% - ${theme.titleHeight}px)`,
    backgroundColor: theme.color.white,
}));
const Side = styled_1.default(Main)({
    gridColumnStart: "1",
});
const Header = styled_1.default("div")({
    height: "100%",
    gridColumnStart: "1",
    gridColumnEnd: "span 2",
    gridRowStart: "1",
    gridRowEnd: "span 1",
});
const Layout = (_a) => {
    var { loading, header, sidenav, main } = _a, props = __rest(_a, ["loading", "header", "sidenav", "main"]);
    return (React.createElement(Container, Object.assign({}, props),
        loading && React.createElement(__1.Progress, null),
        React.createElement(GridContainer, null,
            React.createElement(Header, null, header),
            React.createElement(Side, null, sidenav),
            React.createElement(Main, null, main))));
};
exports.default = Layout;
//# sourceMappingURL=Layout.js.map