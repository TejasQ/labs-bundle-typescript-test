"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const OperationalContext_1 = __importDefault(require("../OperationalContext/OperationalContext"));
const utils_1 = require("../utils");
const styled_1 = __importDefault(require("../utils/styled"));
const makeContainer = (type) => styled_1.default(type === "link" ? "a" : "div")(({ theme, compact }) => ({
    label: "sidenavheader",
    textDecoration: "none",
    width: "100%",
    borderBottom: compact ? 0 : "1px solid",
    borderBottomColor: theme.color.separators.default,
}));
const Content = styled_1.default("div")(({ theme, isCondensed, compact, isActive }) => ({
    textDecoration: "none",
    cursor: "pointer",
    position: "relative",
    display: compact ? "none" : "flex",
    flexDirection: "column",
    alignItems: "flex-start",
    justifyContent: "center",
    height: isCondensed ? 60 : 73,
    overflow: "hidden",
    padding: `0 ${theme.space.content}px`,
    width: "100%",
    marginBottom: isActive ? -26 : 0,
}));
const LabelText = styled_1.default("div") `
  position: relative;
  display: flex;
  font-weight: ${({ theme }) => theme.font.weight.medium};
  letter-spacing: 0.25;
  text-transform: uppercase;
  white-space: nowrap;
  user-select: none;
  margin: 0;
  ${({ theme }) => `
    color: ${theme.color.text.dark};
    font-size: ${theme.font.size.body}px;
  `};
`;
const ItemsContainer = styled_1.default("div")({
    /** @todo add this animation when we move to a JSON-style API for SidenavHeaders */
    // animation: `${floatIn} .15s forwards ease`,
    position: "relative",
});
const CloseButton = styled_1.default("div")(({ theme }) => ({
    position: "absolute",
    cursor: "pointer",
    display: "none",
    alignItems: "center",
    justifyContent: "center",
    width: 24,
    height: 24,
    top: 16,
    right: theme.space.content,
    color: theme.color.primary,
    ".op_sidenavheader:hover &": {
        display: "flex",
    },
    "& svg": {
        width: 16,
        height: 16,
    },
}));
const Summary = styled_1.default("div") `
  display: block;
  font-weight: normal;
  text-transform: none;
  user-select: none;
  margin-top: 4px;
  ${({ theme, isActive, compact }) => `
    font-size: ${theme.font.size.fineprint}px;
    color: ${theme.color.text.lightest};
    left: ${theme.space.content}px;
    visibility: ${compact || isActive ? "hidden" : "visible"};
  `};
`;
const truncate = (maxLength) => (text) => {
    if (text.length < maxLength) {
        return text;
    }
    return text.slice(0, maxLength) + "...";
};
const SidenavHeader = (_a) => {
    var { onToggle, active, to, compact } = _a, props = __rest(_a, ["onToggle", "active", "to", "compact"]);
    const isActive = Boolean(active) || Boolean(compact);
    // The implementation of this component relies on the fact that it only has valid
    // `SidenavItem` components as children. The type casting here expresses that assumption.
    const childSidenavItems = (React.Children.toArray(props.children) || []);
    const hasChildLinks = childSidenavItems.some(child => Boolean(child.props.to));
    // Actual `to` prop should invalidate if the element has sublinks and is active
    const href = isActive && hasChildLinks ? undefined : to;
    const Container = href ? makeContainer("link") : makeContainer("block");
    return (React.createElement(OperationalContext_1.default, null, ctx => {
        return (React.createElement(Container, Object.assign({}, props, { compact: compact, href: href, onClick: (ev) => {
                if (props.onClick) {
                    props.onClick();
                }
                if (onToggle) {
                    onToggle(!active);
                }
                if (!utils_1.isModifiedEvent(ev) && ctx.pushState && to && !utils_1.isOutsideLink(to)) {
                    ev.preventDefault();
                    // Even if the `props.to` prop was ignored, redirect should still happen here
                    ctx.pushState(to);
                }
            } }),
            React.createElement(Content, { isActive: isActive, compact: compact, onClick: props.onClick, isCondensed: Boolean(props.condensed) },
                React.createElement(LabelText, { compact: compact, isActive: isActive },
                    props.label,
                    props.icon && React.createElement(Icon_1.default, { name: props.icon, right: true })),
                !props.condensed && (React.createElement(Summary, { compact: compact, isActive: isActive }, truncate(24)(childSidenavItems.map(child => child.props.label).join(", "))))),
            childSidenavItems.length > 0 && (React.createElement(CloseButton, { onClick: (ev) => {
                    // Prevent clicks on parent in order to avoid conflicting behavior
                    ev.stopPropagation();
                    if (onToggle) {
                        onToggle(!active);
                    }
                } },
                React.createElement(Icon_1.default, { name: active ? "ChevronUp" : "ChevronDown" }))),
            isActive && (React.createElement(ItemsContainer, null, React.Children.map(props.children, child => {
                /**
                 * If a child manages to get here but does not exist
                 * it will have a value of `null` or `false`, then we
                 * should not attempt to extend it but rather forward it on
                 * as is.
                 */
                if (!child) {
                    return child;
                }
                const typedChild = child;
                return Object.assign({}, typedChild, { props: Object.assign({}, typedChild.props, { compact }) });
            })))));
    }));
};
exports.default = SidenavHeader;
//# sourceMappingURL=SidenavHeader.js.map