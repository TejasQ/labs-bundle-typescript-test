"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const tinycolor2_1 = __importDefault(require("tinycolor2"));
const __1 = require("../");
const constants_1 = require("../utils/constants");
const styled_1 = __importDefault(require("../utils/styled"));
const Container = styled_1.default("div")(({ theme, color_ }) => {
    const backgroundColor = tinycolor2_1.default(constants_1.expandColor(theme, color_) || theme.color.primary)
        .setAlpha(0.1)
        .toString();
    return {
        backgroundColor,
        fontSize: theme.font.size.small,
        fontWeight: theme.font.weight.medium,
        label: "chip",
        position: "relative",
        height: theme.space.element,
        display: "inline-flex",
        alignItems: "center",
        boxSizing: "border-box",
        width: "fit-content",
        borderRadius: 2,
        cursor: "pointer",
        overflow: "hidden",
        color: theme.color.text.default,
        margin: `0px ${theme.space.small}px 0px 0px`,
    };
});
const Content = styled_1.default("div")(({ theme }) => ({
    height: "100%",
    display: "flex",
    alignItems: "center",
    padding: `0px ${theme.space.base}px`,
    "&:hover": {
        backgroundColor: "rgba(0, 0, 0, 0.1)",
    },
}));
const Action = styled_1.default("div")(({ theme }) => {
    return {
        borderLeft: `1px solid ${theme.color.ghost}`,
        width: theme.space.element,
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        height: "100%",
        "&:hover": {
            backgroundColor: "rgba(0, 0, 0, 0.1)",
        },
    };
});
const Chip = (_a) => {
    var { onClick, onIconClick, icon, children } = _a, props = __rest(_a, ["onClick", "onIconClick", "icon", "children"]);
    return (React.createElement(Container, Object.assign({ color_: props.color }, props),
        React.createElement(Content, { onClick: onClick }, children),
        onIconClick && (React.createElement(Action, { onClick: onIconClick }, typeof icon === "string" ? React.createElement(__1.Icon, { name: icon, size: 12 }) : icon))));
};
exports.default = Chip;
//# sourceMappingURL=Chip.js.map