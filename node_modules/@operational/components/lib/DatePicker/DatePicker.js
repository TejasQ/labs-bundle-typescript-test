"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const __1 = require("../");
const LabelText_1 = require("../LabelText/LabelText");
const mixins_1 = require("../utils/mixins");
const utils_1 = require("../utils");
const DatePicker_Month_1 = __importDefault(require("./DatePicker.Month"));
const DatePicker_styles_1 = require("./DatePicker.styles");
const DatePicker_utils_1 = require("./DatePicker.utils");
class DatePicker extends React.Component {
    constructor(props) {
        super(props);
        this.validate(props); // Start year month is either based on the start date
        // or the current month if no start date is specified.
        const startYearMonthInWidget = props.start
            ? {
                year: DatePicker_utils_1.toYearMonthDay(props.start).year,
                month: DatePicker_utils_1.toYearMonthDay(props.start).month,
            }
            : {
                year: new Date().getFullYear(),
                month: new Date().getMonth(),
            };
        this.state = Object.assign({}, startYearMonthInWidget, { isExpanded: false });
    }
    // Optional props argument is used when the component doesn't have
    // these dates on the instance (e.g. constructor).
    validate(props) {
        const validatedProps = props || this.props; // Validate start date of
        if (validatedProps.start) {
            DatePicker_utils_1.validateDateString(validatedProps.start);
        }
        if (validatedProps.end) {
            DatePicker_utils_1.validateDateString(validatedProps.end);
        }
    }
    changeMonth(diff) {
        this.setState(prevState => DatePicker_utils_1.changeMonth(diff, { month: prevState.month, year: prevState.year }));
    }
    componentDidMount() {
        this.keypressHandler = (ev) => {
            if (ev.keyCode !== utils_1.keyCodes.esc) {
                return;
            }
            this.setState(prevState => (Object.assign({}, prevState, { isExpanded: false })));
            if (this.inputNode) {
                this.inputNode.blur();
            }
        };
        this.outsideClickHandler = (ev) => {
            if (this.containerNode && (this.containerNode === ev.target || this.containerNode.contains(ev.target))) {
                return;
            }
            this.setState(prevState => (Object.assign({}, prevState, { isExpanded: false })));
        };
        document.addEventListener("click", this.outsideClickHandler);
        document.addEventListener("keydown", this.keypressHandler);
    }
    componentDidUpdate() {
        this.validate();
    }
    componentWillUnmount() {
        if (this.outsideClickHandler) {
            document.removeEventListener("click", this.outsideClickHandler);
        }
        if (this.keypressHandler) {
            document.removeEventListener("keydown", this.keypressHandler);
        }
    }
    render() {
        /**
         * Contrary to other component implementations, the `className` prop is destructured from the spread `props` object.
         * This is to allow for it to only apply to the datepicker's container, which may be the label or the picker itself.
         */
        const _a = this.props, { onChange, placeholder, start, end, label, min, max, className } = _a, props = __rest(_a, ["onChange", "placeholder", "start", "end", "label", "min", "max", "className"]);
        const { isExpanded, month, year } = this.state;
        const domId = props.id || (label && label.toLowerCase ? label.toLowerCase().replace(/\s/g, "-") : undefined);
        const nextMonth = DatePicker_utils_1.changeMonth(1, { month: this.state.month, year: this.state.year });
        const canGoToPreviousMonth = !min || min < DatePicker_utils_1.toDate(this.state.year, this.state.month, 0);
        const canGoToNextMonth = !max || max >= DatePicker_utils_1.toDate(nextMonth.year, nextMonth.month, 0);
        const datePickerWithoutLabel = (isStandalone) => (React.createElement(DatePicker_styles_1.Container, Object.assign({}, props, { className: isStandalone ? className : undefined, innerRef: (node) => {
                this.containerNode = node;
            }, isExpanded: isExpanded }),
            !!(start && end) && (React.createElement(DatePicker_styles_1.Toggle, { onClick: (ev) => {
                    ev.preventDefault();
                    if (onChange) {
                        onChange({
                            start: undefined,
                            end: undefined,
                        });
                    }
                } },
                React.createElement(__1.Icon, { name: "No", size: 14 }))),
            React.createElement(DatePicker_styles_1.Input, { isExpanded: this.state.isExpanded, id: domId, readOnly: true, innerRef: (node) => {
                    this.inputNode = node;
                }, value: [start, end].filter(s => !!s).join(" - "), placeholder: placeholder, onClick: () => {
                    this.setState(prevState => ({
                        isExpanded: !prevState.isExpanded,
                    }), () => {
                        if (!this.state.isExpanded) {
                            this.inputNode.blur();
                        }
                    });
                } }),
            React.createElement(DatePicker_styles_1.DatePickerCard, { isExpanded: isExpanded },
                React.createElement(DatePicker_styles_1.MonthNav, null,
                    React.createElement(DatePicker_styles_1.IconContainer, { disabled: !canGoToPreviousMonth, onClick: (ev) => {
                            ev.preventDefault();
                            if (!canGoToPreviousMonth) {
                                return;
                            }
                            this.changeMonth(-1);
                        } },
                        React.createElement(__1.Icon, { name: "ChevronLeft", size: 12 })),
                    React.createElement("span", null, `${DatePicker_utils_1.months[month]}, ${year}`),
                    React.createElement(DatePicker_styles_1.IconContainer, { disabled: !canGoToNextMonth, onClick: (ev) => {
                            ev.preventDefault();
                            if (!canGoToNextMonth) {
                                return;
                            }
                            this.changeMonth(+1);
                        } },
                        React.createElement(__1.Icon, { name: "ChevronRight", size: 12 }))),
                React.createElement(DatePicker_Month_1.default, { start: start, end: end, min: min, max: max, year: year, month: month, onChange: onChange }))));
        return label ? (React.createElement(mixins_1.Label, Object.assign({}, props, { className: className }),
            React.createElement(LabelText_1.LabelText, null, label),
            datePickerWithoutLabel(false))) : (datePickerWithoutLabel(true));
    }
}
DatePicker.defaultProps = {
    placeholder: "Enter date",
};
exports.default = DatePicker;
//# sourceMappingURL=DatePicker.js.map