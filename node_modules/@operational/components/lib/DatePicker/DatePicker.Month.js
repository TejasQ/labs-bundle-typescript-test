"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const DatePicker_styles_1 = require("./DatePicker.styles");
const DatePicker_utils_1 = require("./DatePicker.utils");
const setNewDate = (date, current) => {
    const { start, end } = current;
    const newStart = start && !end ? start : date;
    const newEnd = start && !end ? date : start && end ? null : end;
    const [sortedNewStart, sortedNewEnd] = [newStart, newEnd].sort();
    return {
        start: sortedNewStart || undefined,
        end: sortedNewEnd || undefined,
    };
};
const isSelected = (date, current) => {
    const { start, end } = current;
    return date === start || date === end || (!!start && !!end && date >= start && date <= end);
};
const Month = ({ year, month, start, end, onChange, min, max }) => {
    const prevPlaceholderDays = DatePicker_utils_1.monthStartDay(year, month);
    const nextMonth = month === 11 ? 0 : month + 1;
    const nextYear = month === 11 ? year + 1 : year;
    const prevMonth = month === 0 ? 11 : month - 1;
    const prevYear = month === 0 ? year - 1 : year;
    const daysInCurrentMonth = DatePicker_utils_1.daysInMonth(month, year);
    const daysInPreviousMonth = DatePicker_utils_1.daysInMonth(prevMonth, prevYear);
    const nextPlaceholderDays = (daysInCurrentMonth + prevPlaceholderDays) % 7 === 0 ? 0 : 7 - ((daysInCurrentMonth + prevPlaceholderDays) % 7);
    return (React.createElement(DatePicker_styles_1.Days, null,
        DatePicker_utils_1.range(prevPlaceholderDays).map((_, index) => {
            const day = daysInPreviousMonth + index - prevPlaceholderDays;
            const date = DatePicker_utils_1.toDate(prevYear, prevMonth, day);
            const isDisabled = Boolean((min && date < min) || (max && date > max));
            return (React.createElement(DatePicker_styles_1.Day, { selected: isSelected(date, {
                    start,
                    end,
                }), key: index, isPlaceholder: true, isDisabled: isDisabled, onClick: (ev) => {
                    ev.preventDefault();
                    if (isDisabled) {
                        return;
                    }
                    if (onChange) {
                        onChange(setNewDate(date, {
                            start,
                            end,
                        }));
                    }
                } }, day + 1));
        }),
        DatePicker_utils_1.range(daysInCurrentMonth).map((_, index) => {
            const date = DatePicker_utils_1.toDate(year, month, index);
            const isDisabled = Boolean((min && date < min) || (max && date > max));
            return (React.createElement(DatePicker_styles_1.Day, { selected: isSelected(date, {
                    start,
                    end,
                }), key: index, isDisabled: isDisabled, onClick: (ev) => {
                    ev.preventDefault();
                    if (isDisabled) {
                        return;
                    }
                    if (onChange) {
                        onChange(setNewDate(date, {
                            start,
                            end,
                        }));
                    }
                } }, index + 1));
        }),
        DatePicker_utils_1.range(nextPlaceholderDays).map((number, index) => {
            const date = DatePicker_utils_1.toDate(nextYear, nextMonth, number);
            const isDisabled = Boolean((min && date < min) || (max && date > max));
            return (React.createElement(DatePicker_styles_1.Day, { key: index, selected: isSelected(date, {
                    start,
                    end,
                }), isDisabled: isDisabled, isPlaceholder: true, onClick: (ev) => {
                    ev.preventDefault();
                    if (isDisabled) {
                        return;
                    }
                    if (onChange) {
                        onChange(setNewDate(date, {
                            start,
                            end,
                        }));
                    }
                } }, number + 1));
        })));
};
exports.default = Month;
//# sourceMappingURL=DatePicker.Month.js.map