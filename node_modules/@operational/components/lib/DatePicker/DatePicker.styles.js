"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const tinycolor2_1 = __importDefault(require("tinycolor2"));
const styled_1 = __importDefault(require("../utils/styled"));
const mixins = __importStar(require("../utils/mixins"));
const inputHeight = 36;
const inputDefaultWidth = 240;
exports.Container = styled_1.default("div")({
    label: "datepicker",
    width: inputDefaultWidth,
    position: "relative",
});
exports.DatePickerCard = styled_1.default("div")({
    position: "absolute",
    left: 0,
}, ({ theme, isExpanded }) => ({
    backgroundColor: theme.deprecated.colors.white,
    display: isExpanded ? "block" : "none",
    boxShadow: theme.deprecated.shadows.popup,
    borderRadius: theme.deprecated.borderRadius,
    // Push down the card to the bottom of the input field,
    // plus the twice the size of the outside focus shadow.
    top: inputHeight + 6,
    padding: `${(theme.deprecated.spacing * 3) / 4}px ${theme.deprecated.spacing}px ${(theme.deprecated.spacing * 4) /
        3}px`,
    width: inputDefaultWidth,
    zIndex: theme.deprecated.baseZIndex + 1000,
}));
exports.Toggle = styled_1.default("div")(({ theme }) => ({
    position: "absolute",
    cursor: "pointer",
    top: 1,
    right: 1,
    borderTopRightRadius: theme.deprecated.borderRadius,
    borderBottomRightRadius: theme.deprecated.borderRadius,
    width: inputHeight - 2,
    height: inputHeight - 2,
    fontSize: 10,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    zIndex: theme.deprecated.baseZIndex + 1000,
    color: theme.deprecated.colors.inputBorder,
    borderLeft: "1px solid",
    borderColor: theme.deprecated.colors.inputBorder,
    "& svg": {
        position: "relative",
        pointerEvents: "none",
    },
    ":hover": {
        backgroundColor: theme.deprecated.colors.lighterBackground,
    },
}));
exports.MonthNav = styled_1.default("div")(({ theme }) => ({
    marginBottom: theme.space.element,
    textAlign: "center",
    "& > *": {
        margin: "0 2px",
        verticalAlign: "middle",
        display: "inline-block",
    },
    "& > span": Object.assign({}, theme.deprecated.typography.body, { userSelect: "none", width: 120, textAlign: "center" }),
}));
exports.IconContainer = styled_1.default("div")(({ theme, disabled }) => ({
    width: 20,
    height: 20,
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    borderRadius: "50%",
    cursor: disabled ? "not-allowed" : "pointer",
    opacity: disabled ? "0.4" : "1",
    ":hover": {
        backgroundColor: disabled ? undefined : theme.color.background.lighter,
    },
}));
exports.Days = styled_1.default("div")({
    textAlign: "center",
    width: 210,
    margin: "auto -1px",
});
const makeDayTextColor = ({ isPlaceholder, isDisabled, selected, theme, }) => {
    if (selected) {
        return theme.color.white;
    }
    if (isDisabled) {
        return theme.color.text.lightest;
    }
    if (isPlaceholder) {
        return theme.color.text.lighter;
    }
    return theme.color.text.dark;
};
exports.Day = styled_1.default("div")({
    userSelect: "none",
    width: 30,
    height: 30,
    marginRight: -1,
    marginBottom: -1,
    cursor: "pointer",
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    padding: 3,
    borderRadius: "50%",
    backgroundClip: "content-box",
}, ({ theme, selected, isPlaceholder, isDisabled }) => (Object.assign({}, theme.deprecated.typography.body, { backgroundColor: selected ? theme.deprecated.colors.info : "transparent", color: makeDayTextColor({ isPlaceholder, isDisabled, selected, theme }), cursor: isDisabled ? "not-allowed" : "pointer", ":hover": {
        backgroundColor: selected
            ? tinycolor2_1.default(theme.color.primary)
                .darken(5)
                .toString()
            : isDisabled
                ? "transparent"
                : theme.color.background.lighter,
    } })));
exports.Input = styled_1.default("input")(({ theme, isExpanded }) => (Object.assign({}, theme.deprecated.typography.body, { userSelect: "none", borderRadius: theme.deprecated.borderRadius, padding: (theme.deprecated.spacing * 2) / 3, height: inputHeight, cursor: "pointer", border: "1px solid", borderColor: "rgb(208, 217, 229)", width: "100%", position: "relative", "&:focus": mixins.inputFocus({
        theme,
    }) }, (isExpanded
    ? mixins.inputFocus({
        theme,
    })
    : {}))));
exports.ClearButton = styled_1.default("div")(({ theme }) => ({
    width: inputHeight,
    height: inputHeight,
    cursor: "pointer",
    position: "absolute",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    bottom: 0,
    right: -inputHeight + 1,
    opacity: 0.3,
    textAlign: "center",
    zIndex: theme.deprecated.baseZIndex + 100,
    "&:hover": {
        opacity: 1,
        "& svg": {
            stroke: theme.deprecated.colors.warning,
        },
    },
}));
//# sourceMappingURL=DatePicker.styles.js.map