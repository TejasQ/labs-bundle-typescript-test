"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const moment_1 = __importDefault(require("moment"));
exports.months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
];
/** A range of numbers pre-filled in an array
 * range(5) -> [ 0, 1, 2, 3, 4 ]
 */
exports.range = (n) => Array.apply(null, {
    length: n,
}).map((_, i) => i);
exports.changeMonth = (diff, { year, month }) => {
    return {
        month: month + diff < 0 ? month + diff + 12 : (month + diff) % 12,
        year: month + diff < 0 ? year - 1 : month + diff > 11 ? year + 1 : year,
    };
};
exports.toDate = (year, month, day) => `${year}-${month < 9 ? "0" : ""}${month + 1}-${day < 9 ? "0" : ""}${day + 1}`;
exports.validateDateString = (date) => {
    const chunks = date.split("-").map(chunk => Number(chunk));
    if (chunks.length !== 3) {
        throw new Error("Date must be of the format YYYY-MM-DD. You seem to have supplied fewer numbers separated by dashes.");
    }
    if (isNaN(chunks[0])) {
        throw new Error("Invalid year. Date must be a valid YYYY-MM-DD format.");
    }
    if (isNaN(chunks[1])) {
        throw new Error("Invalid month. Date must be a valid YYYY-MM-DD format.");
    }
    if (isNaN(chunks[2])) {
        throw new Error("Invalid day. Date must be a valid YYYY-MM-DD format.");
    }
};
exports.toYearMonthDay = (date) => {
    const chunks = date.split("-").map(chunk => Number(chunk));
    return {
        year: chunks[0],
        // Months and days are numbered starting 0 as a state management convenience
        month: chunks[1] - 1,
        day: chunks[2] - 1,
    };
};
exports.monthStartDay = (year, month) => moment_1.default(exports.toDate(year, month, 0)).day();
exports.daysInMonth = (month, year) => {
    return moment_1.default(exports.toDate(year, month, 2)).daysInMonth();
};
//# sourceMappingURL=DatePicker.utils.js.map