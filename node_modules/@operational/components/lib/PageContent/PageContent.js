"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Confirm_1 = __importDefault(require("../Internals/Confirm"));
const Modal_1 = __importDefault(require("../Internals/Modal"));
const styled_1 = __importDefault(require("../utils/styled"));
const StyledPageContent = styled_1.default("div")(props => {
    const gridTemplateColumns = {
        main: "auto",
        "main side": "auto 280px",
        "side main": "280px auto",
    }[props.areas || "main"];
    return {
        gridTemplateColumns,
        display: "grid",
        alignItems: "start",
        gridTemplateAreas: `"${props.areas}"`,
        gridGap: props.theme.space.element,
        width: "100%",
        height: "100%",
        minWidth: 800,
        maxWidth: props.fill_ ? "none" : 1150,
        padding: `${props.theme.space.element}px`,
        /**
         * Since PageContent is in a scrollable context,
         * a user often scrolls past the bottom padding
         * on large pages, and the bottom edge of the last
         * child touches the bottom of the container: there
         * _is no padding on the bottom_ because it has been
         * passed.
         *
         * The following hack adds a small piece of pseudo-DOM
         * in order to preserve space on the bottom.
         *
         * The `grid-gap` adds appropriate bottom spacing to
         * PageContent since this pseudo-element is seen as a
         * grid row.
         */
        "::after": {
            content: '""',
            display: "block",
            height: 1,
        },
    };
});
const Container = styled_1.default("div")({
    position: "relative",
    width: "100%",
    height: "100%",
    overflow: "auto",
});
// `fill` must be rename internally to avoid conflict with the native `fill` DOM attribute
const PageContent = (_a) => {
    var { fill, children } = _a, props = __rest(_a, ["fill", "children"]);
    return (React.createElement(Modal_1.default, null, modal => (React.createElement(Confirm_1.default, null, confirm => (React.createElement(Container, null,
        React.createElement(StyledPageContent, Object.assign({}, props, { fill_: fill }), typeof children === "function" ? children({ confirm, modal }) : children)))))));
};
exports.default = PageContent;
//# sourceMappingURL=PageContent.js.map