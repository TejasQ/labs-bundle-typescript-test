"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const styled_1 = __importDefault(require("../utils/styled"));
const getGridCSSProperties = (gridType) => {
    if (gridType === "IDE") {
        return {
            gridTemplateColumns: "200px auto",
            gridTemplateRows: "auto",
        };
    } // Handle NxM case
    const gridNumbers = String(gridType).split("x");
    const cols = Number(gridNumbers[0]);
    const rows = Number(gridNumbers[1]);
    if (!isNaN(cols) && !isNaN(rows)) {
        return {
            gridTemplateColumns: `repeat(${cols}, 1fr)`,
            gridTemplateRows: `repeat(${rows}, 1fr)`,
        };
    }
    throw new Error("Grid type can be either 'IDE' or of an `MxN` format, e.g. `1x2` or `5x6`. See https://ui.contiamo.com/components/grids/.");
};
const Container = styled_1.default("div")(({ theme, gridType }) => (Object.assign({ label: "Grid", width: "100%", height: "100%", display: "grid", alignItems: "flex-start", padding: (theme.deprecated.spacing * 4) / 3, gridColumnGap: (theme.deprecated.spacing * 4) / 3, gridRowGap: (theme.deprecated.spacing * 4) / 3 }, getGridCSSProperties(gridType))));
const Grid = (_a) => {
    var { type } = _a, props = __rest(_a, ["type"]);
    return (React.createElement(Container, Object.assign({}, props, { gridType: type }), props.children));
};
Grid.defaultProps = {
    type: "3x2",
};
exports.default = Grid;
//# sourceMappingURL=Grid.js.map