"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const uniqueId_1 = __importDefault(require("lodash/uniqueId"));
const React = __importStar(require("react"));
const react_emotion_1 = require("react-emotion");
const styled_1 = __importDefault(require("../utils/styled"));
const toggleCheckboxAnimation = react_emotion_1.keyframes `
  0% {
    opacity: 0;
    transform: scale(0.6) rotate(45deg);
  }

  70% {
    opacity: 1;
    transform: scale(1.1) rotate(45deg);
  }
  
  100% {
    transform: scale(1) rotate(45deg);
  }
`;
// ref: https://codersblock.com/blog/checkbox-trickery-with-css/
const Input = styled_1.default("input") `
  position: absolute;
  left: -9999px;

  :checked + label::after {
    content: "";
    display: block;
    width: 5px;
    height: 10px;
    position: absolute;
    left: 7px;
    margin: 0 auto;
    top: 2px;
    transform: rotate(45deg);
    border-right: 2px solid ${props => props.theme.color.primary};
    border-bottom: 2px solid ${props => props.theme.color.primary};
    cursor: pointer;
    animation: ${toggleCheckboxAnimation} 0.2s ease forwards;
  }

  :disabled + label {
    cursor: not-allowed;
    pointer-events: none;
  }
`;
const Label = styled_1.default("label") `
  position: relative;
  cursor: pointer;
  height: 20px;
  display: block;
  margin-bottom: 10px;
  padding-left: 32px;
  line-height: 20px;
  user-select: none;

  font-size: 12px;
  color: ${props => props.theme.color.text.default};

  :hover {
    color: ${props => props.theme.color.primary};

    ::before {
      border: solid 1px ${props => props.theme.color.primary};
    }
  }

  ::before {
    content: "";
    cursor: pointer;
    position: absolute;
    display: block;
    top: 0;
    left: 0;
    width: 18px;
    height: 18px;
    border-radius: ${props => props.theme.borderRadius}px;
    background-color: #f2f2f2;
    border: solid 1px #c0c0c0;
  }
`;
class Checkbox extends React.Component {
    constructor() {
        super(...arguments);
        this.uuid = uniqueId_1.default("checkbox_");
    }
    render() {
        const { value, onChange, label, disabled } = this.props;
        return (React.createElement("div", { style: disabled ? { opacity: 0.6 } : {} },
            React.createElement(Input, { id: this.uuid, type: "checkbox", checked: Boolean(value), onChange: () => onChange(!value), disabled: disabled }),
            React.createElement(Label, { htmlFor: this.uuid }, label)));
    }
}
exports.default = Checkbox;
//# sourceMappingURL=Checkbox.js.map