"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_emotion_1 = require("react-emotion");
const __1 = require("../");
const styled_1 = __importDefault(require("../utils/styled"));
const Container = styled_1.default("div")({
    label: "progress",
    width: "100%",
    overflowX: "hidden",
    textAlign: "center",
    left: 0,
    position: "absolute",
    backgroundColor: "transparent",
}, ({ theme, bottom }) => ({
    zIndex: theme.zIndex.globalProgress,
    top: bottom ? "auto" : 0,
    bottom: bottom ? 0 : "auto",
}));
const fillProgress = react_emotion_1.keyframes({
    from: {
        transform: "translate3d(-100%, 0, 0)",
    },
    to: {
        transform: "translate3d(0, 0, 0)",
    },
});
const Bar = styled_1.default("div")(({ theme, isError }) => (Object.assign({ width: "100%", height: 3, backgroundColor: theme.color.primary }, (isError
    ? {
        backgroundColor: theme.color.error,
    }
    : {
        animation: `${fillProgress} cubic-bezier(0, 0.9, 0.26, 1) forwards 20s`,
    }))));
const ErrorMessage = styled_1.default("div")(({ theme }) => ({
    padding: `${theme.space.small}px ${theme.space.small}px`,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative",
    textAlign: "center",
    backgroundColor: theme.color.error,
    color: theme.color.white,
}));
const Action = styled_1.default("div")(({ theme }) => ({
    opacity: 0.7,
    display: "inline-block",
    marginLeft: theme.space.content,
    userSelect: "none",
    "& > *": {
        display: "inline-block",
        verticalAlign: "middle",
    },
    "& svg": {
        width: theme.space.content,
        height: theme.space.content,
        marginRight: theme.space.base,
    },
    ":first-of-type svg": {
        width: theme.space.medium,
        height: theme.space.medium,
    },
    ":hover": {
        opacity: 1,
    },
}));
const Progress = (_a) => {
    var { error, onRetry, onClose } = _a, props = __rest(_a, ["error", "onRetry", "onClose"]);
    return (React.createElement(Container, Object.assign({}, props),
        React.createElement(Bar, { isError: Boolean(error) }),
        error ? (React.createElement(ErrorMessage, null,
            error,
            onRetry && (React.createElement(Action, { onClick: onRetry },
                React.createElement(__1.Icon, { name: "Sync" }),
                React.createElement("span", null, "Retry"))),
            onClose && (React.createElement(Action, { onClick: onClose },
                React.createElement(__1.Icon, { name: "No" }),
                React.createElement("span", null, "Dismiss"))))) : null));
};
exports.default = Progress;
//# sourceMappingURL=Progress.js.map