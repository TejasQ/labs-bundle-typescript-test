"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_emotion_1 = __importStar(require("react-emotion"));
const constants_1 = require("../utils/constants");
const spinKeyframes = react_emotion_1.keyframes({
    "0%": {
        transform: "rotate(0deg)",
    },
    "100%": {
        transform: "rotate(360deg)",
    },
});
const bounceKeyframes = react_emotion_1.keyframes({
    "0%": {
        transform: "translate3d(0, 0, 0)",
    },
    "30%": {
        transform: "translate3d(0, -4px, 0)",
    },
    "60%": {
        transform: "translate3d(0, 0, 0)",
    },
    "100%": {
        transform: "translate3d(0, 0, 0)",
    },
});
const defaultSize = 18;
const Container = react_emotion_1.default("div")(({ size, color, theme, left, right }) => ({
    display: "inline-block",
    width: size || defaultSize,
    height: size || defaultSize,
    marginRight: left ? theme.space.small : 0,
    marginLeft: right ? theme.space.small : 0,
    "& svg": {
        fill: constants_1.expandColor(theme, color) || "currentColor",
    },
}));
/**
 * This additional container is introduced to make transforms set on the main container from the outside
 * (e.g. `styled` helper) do not mess up the rotation origin.
 */
const AnimationContainer = react_emotion_1.default("div")(({ bounce, size }) => ({
    margin: 0,
    lineHeight: 0,
    width: size || defaultSize,
    height: size || defaultSize,
    transformOrigin: "center center",
    /*
     * When the bounce animation is used, animation properties are set on the individual bouncing squares,
     * therefore no animation is set on the container.
     */
    animation: bounce ? "none" : `${spinKeyframes} 1.5s infinite linear`,
}));
const RegularSpinner = (_) => (React.createElement("svg", { viewBox: "0 0 360 360" },
    React.createElement("path", { d: "M160,0 L160,100 L200,100 L200,0Z" }),
    React.createElement("path", { d: "M321.396,67.075l-70.697,70.697l-28.284,-28.284l70.697,-70.697c9.428,9.428 18.856,18.856 28.284,28.284Z" }),
    React.createElement("path", { d: "M260,160 L360,160 L360,200 L260,200Z" }),
    React.createElement("path", { d: "M321.853,292.842l-28.285,28.284l-69.71,-69.711l28.284,-28.284c23.237,23.237 46.474,46.474 69.711,69.711Z" }),
    React.createElement("path", { d: "M160,260 L160,360 L200,360 L200,260Z" }),
    React.createElement("path", { d: "M136.142,251.415l-69.71,69.711l-28.285,-28.284l69.711,-69.711c9.428,9.428 18.856,18.856 28.284,28.284Z" }),
    React.createElement("path", { d: "M0,160 L100,160 L100,200 L0,200Z" }),
    React.createElement("path", { d: "M137.592,109.495l-28.299,28.269l-70.659,-70.734l28.3,-28.269c23.553,23.578 47.105,47.156 70.658,70.734Z" })));
const BouncingSpinnerContainer = react_emotion_1.default("div")({
    width: "100%",
    height: "100%",
    position: "relative",
});
/**
 * The bouncing spinner is constructed out of 3 80x80 boxes spaced out horizontally on a 360x360 grid
 * (these units don't refer to pixels, they simply mimic the grid of the icons.
 * The math used in here lays these boxes out so they're vertically centered and spaced
 * equally on the horizontal axis without any gutter.
 */
const BouncingSpinnerBox = react_emotion_1.default("div")(({ no, theme, color }) => ({
    width: `${(80 / 360) * 100}%`,
    height: `${(80 / 360) * 100}%`,
    position: "absolute",
    top: `${(140 / 360) * 100}%`,
    left: `${((no * 140) / 360) * 100}%`,
    backgroundColor: constants_1.expandColor(theme, color) || theme.color.text.lighter,
    animation: `${bounceKeyframes} 1s infinite ease-in-out`,
    /*
     * Achieve the wave effect through incremental animation delays on the individual elements.
     */
    animationDelay: `${no * 0.16}s`,
}));
const BouncingSpinner = (props) => (React.createElement(BouncingSpinnerContainer, null,
    React.createElement(BouncingSpinnerBox, { color: props.color, no: 0 }),
    React.createElement(BouncingSpinnerBox, { color: props.color, no: 1 }),
    React.createElement(BouncingSpinnerBox, { color: props.color, no: 2 })));
const Spinner = props => (React.createElement(Container, Object.assign({}, props),
    React.createElement(AnimationContainer, { bounce: props.bounce, size: props.size }, props.bounce ? React.createElement(BouncingSpinner, { color: props.color }) : React.createElement(RegularSpinner, { color: props.color }))));
exports.default = Spinner;
//# sourceMappingURL=Spinner.js.map