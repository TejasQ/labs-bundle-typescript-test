"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_copy_to_clipboard_1 = __importDefault(require("react-copy-to-clipboard"));
const utils_1 = require("../utils");
const styled_1 = __importDefault(require("../utils/styled"));
const Hint_1 = __importDefault(require("../Hint/Hint"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const LabelText_1 = require("../LabelText/LabelText");
const Tooltip_1 = __importDefault(require("../Tooltip/Tooltip")); // Styled components appears to have an internal bug that breaks when this is imported from index.ts
const mixins_1 = require("../utils/mixins");
const TextareaComp = styled_1.default("textarea")(({ theme, isCode, isError, isAction, disabled, resize, height }) => {
    const topPadding = (isAction ? 20 : 0) + theme.space.small;
    return {
        height,
        resize,
        fontSize: theme.font.size.small,
        fontWeight: theme.font.weight.regular,
        display: "block",
        width: "100%",
        minHeight: 120,
        borderRadius: theme.borderRadius,
        borderColor: isError ? theme.color.error : theme.color.border.default,
        padding: `${topPadding}px ${theme.space.medium}px ${theme.space.small}px ${theme.space.medium}px`,
        fontFamily: isCode ? "monospace" : "inherit",
        opacity: disabled ? 0.6 : 1.0,
        ":focus": mixins_1.inputFocus({
            theme,
            isError,
        }),
    };
});
const borderWidth = 1;
const ActionHeader = styled_1.default("div")(({ theme, isLabel }) => ({
    fontSize: theme.font.size.fineprint,
    padding: `${theme.space.base}px ${theme.space.small}px`,
    color: theme.color.text.lighter,
    width: `calc(100% - ${2 * borderWidth}px)`,
    position: "absolute",
    backgroundColor: theme.color.background.lighter,
    top: `${borderWidth + (isLabel ? LabelText_1.labelTextHeight + theme.space.base : 0)}px`,
    left: borderWidth,
    zIndex: theme.zIndex.formFieldError,
    display: "flex",
    justifyContent: "flex-end",
    /**
     * Use case: External Links typically have <Icon/>s next to them.
     */
    "& a": {
        display: "inline-flex",
        alignItems: "center",
        color: theme.color.primary,
        cursor: "pointer",
        "&:hover": {
            textDecoration: "underline",
        },
    },
    "& svg": {
        margin: `0 ${theme.space.base}px`,
        width: 10,
        height: 10,
        cursor: "pointer",
    },
}));
class Textarea extends React.Component {
    constructor() {
        super(...arguments);
        this.timeoutId = null;
        this.state = {
            showTooltip: false,
        };
        this.showTooltip = () => {
            if (this.timeoutId) {
                clearTimeout(this.timeoutId);
            }
            this.setState(() => ({ showTooltip: true }));
            this.timeoutId = window.setTimeout(() => {
                this.setState(() => ({ showTooltip: false }));
                this.timeoutId = null;
            }, 1000);
        };
    }
    render() {
        const _a = this.props, { fullWidth, resize, label, hint, disabled, code, value, error, action, height, copy, onChange, onSubmit } = _a, props = __rest(_a, ["fullWidth", "resize", "label", "hint", "disabled", "code", "value", "error", "action", "height", "copy", "onChange", "onSubmit"]);
        return (React.createElement(mixins_1.Label, Object.assign({}, props, { fullWidth: fullWidth }),
            label && React.createElement(LabelText_1.LabelText, null, label),
            hint && (React.createElement(mixins_1.FormFieldControls, null,
                React.createElement(Hint_1.default, null, hint))),
            React.createElement(TextareaComp, { disabled: disabled, isCode: code, value: value, isError: Boolean(error), isAction: Boolean(action || copy), resize: resize, height: height, onKeyDown: (ev) => {
                    if (utils_1.isCmdEnter(ev) && onSubmit) {
                        onSubmit();
                    }
                }, onChange: (e) => {
                    if (!onChange) {
                        return;
                    }
                    onChange(e.target.value);
                } }),
            (this.props.action || this.props.copy) && (React.createElement(ActionHeader, { isLabel: Boolean(label) },
                action,
                copy && (React.createElement(react_copy_to_clipboard_1.default, { text: value, onCopy: this.showTooltip },
                    React.createElement("div", null,
                        this.state.showTooltip && React.createElement(Tooltip_1.default, { right: true }, "Copied!"),
                        React.createElement(Icon_1.default, { size: 8, name: "Copy" }),
                        React.createElement("a", null, "Copy to clipboard")))))),
            error && React.createElement(mixins_1.FormFieldError, null, error)));
    }
}
Textarea.defaultProps = {
    copy: false,
    code: false,
    disabled: false,
    resize: "vertical",
};
exports.default = Textarea;
//# sourceMappingURL=Textarea.js.map