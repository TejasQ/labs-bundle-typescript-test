"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Button_1 = __importDefault(require("../Button/Button"));
const styled_1 = __importDefault(require("../utils/styled"));
const ControlledModal_1 = __importDefault(require("./ControlledModal"));
const actionsBarSize = 36;
const Actions = styled_1.default("div") `
  margin-top: ${({ theme }) => theme.space.element}px;
  align-self: flex-end;
  height: ${actionsBarSize}px;
`;
const ControlledModalContent = styled_1.default("div")(({ fullSize }) => fullSize
    ? {
        height: `calc(100% - ${actionsBarSize}px)`,
        overflow: "auto",
    }
    : {});
class Confirm extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            options: {},
        };
        this.closeConfirm = () => {
            this.setState({ options: {} });
        };
        this.onCancelClick = () => {
            const { onCancel, state } = this.state.options;
            if (onCancel) {
                onCancel(state);
            }
            this.closeConfirm();
        };
        this.onActionClick = () => {
            const { onConfirm, state } = this.state.options;
            if (onConfirm) {
                onConfirm(state);
            }
            this.closeConfirm();
        };
        this.setConfirmState = state => {
            this.setState(prevState => ({
                options: Object.assign({}, prevState.options, { 
                    // No spreading here due to https://github.com/Microsoft/TypeScript/issues/10727
                    state: Object.assign({}, prevState.options.state, state) }),
            }));
        };
    }
    openConfirm(options) {
        this.setState({ options });
    }
    render() {
        const { actionButton, fullSize, title, cancelButton, state, body: Body } = this.state.options;
        const isOpen = Boolean(Body);
        return (React.createElement(React.Fragment, null,
            this.props.children(this.openConfirm.bind(this)),
            isOpen && (React.createElement(ControlledModal_1.default, { fullSize: fullSize, title: title, onClose: this.closeConfirm },
                React.createElement(ControlledModalContent, { fullSize: Boolean(fullSize) }, typeof Body === "function" && state ? (React.createElement(Body, { setConfirmState: this.setConfirmState, confirmState: state })) : (Body)),
                React.createElement(Actions, null,
                    React.cloneElement(typeof cancelButton === "function" ? cancelButton(state) : cancelButton || React.createElement(Button_1.default, null, "Cancel"), {
                        onClick: this.onCancelClick,
                    }),
                    React.cloneElement(typeof actionButton === "function"
                        ? actionButton(state)
                        : actionButton || React.createElement(Button_1.default, { color: "success" }, "Confirm"), {
                        onClick: this.onActionClick,
                    }))))));
    }
}
exports.Confirm = Confirm;
exports.default = Confirm;
//# sourceMappingURL=Confirm.js.map