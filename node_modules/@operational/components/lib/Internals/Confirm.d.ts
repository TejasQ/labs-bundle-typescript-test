import * as React from "react";
import { ButtonProps } from "../Button/Button";
export interface ConfirmBodyProps<T> {
    setConfirmState: (state?: Partial<T>) => void;
    confirmState: T;
}
export interface ConfirmOptions<T> {
    title: React.ReactNode;
    body: React.ReactNode | React.ComponentType<ConfirmBodyProps<T>>;
    fullSize?: boolean;
    cancelButton?: React.ReactElement<ButtonProps> | ((confirmState: T) => React.ReactElement<ButtonProps>);
    actionButton?: React.ReactElement<ButtonProps> | ((confirmState: T) => React.ReactElement<ButtonProps>);
    onConfirm?: (confirmState: T) => void;
    onCancel?: (confirmState: T) => void;
    state?: T;
}
export interface State<T> {
    options: Partial<ConfirmOptions<T>>;
}
export interface Props {
    children: (confirm: <T>(options: ConfirmOptions<T>) => void) => React.ReactNode;
}
export declare class Confirm<T> extends React.Component<Props, Readonly<State<T>>> {
    readonly state: State<T>;
    private openConfirm;
    private closeConfirm;
    private onCancelClick;
    private onActionClick;
    private setConfirmState;
    render(): JSX.Element;
}
export default Confirm;
