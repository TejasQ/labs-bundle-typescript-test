"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const styled_1 = __importDefault(require("../utils/styled"));
exports.tabsBarHeight = 40;
const TabsBar = styled_1.default("div")(({ theme, condensed }) => (Object.assign({ display: "flex", alignItems: "flex-end", height: condensed ? theme.titleHeight : exports.tabsBarHeight, color: "inherit" }, (condensed ? { paddingLeft: 30 } : {}))));
const Tab = styled_1.default("div")(({ theme, active }) => ({
    display: "flex",
    height: "100%",
    alignItems: "center",
    justifyContent: "center",
    color: "currentColor",
    opacity: active ? 1 : 0.8,
    textTransform: "uppercase",
    fontFamily: theme.font.family.main,
    fontSize: theme.font.size.small,
    fontWeight: theme.font.weight.medium,
    padding: `0px ${theme.space.element}px`,
    borderBottom: "2px solid",
    borderBottomColor: active ? "currentColor" : "transparent",
    ":hover": {
        cursor: "pointer",
        opacity: 1,
    },
}));
class Tabs extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            activeTab: 0,
        };
    }
    onTabClick(index) {
        this.setState(() => ({ activeTab: index }));
        if (this.props.onTabChange) {
            this.props.onTabChange(this.props.tabs[index].name);
        }
    }
    getActiveTab() {
        let activeTab;
        if (this.props.activeTabName) {
            const index = this.props.tabs.findIndex(({ name }) => name === this.props.activeTabName);
            activeTab = index === -1 ? 0 : index;
        }
        else {
            activeTab = this.state.activeTab;
        }
        return activeTab;
    }
    render() {
        const activeTab = this.getActiveTab();
        return this.props.children({
            tabsBar: (React.createElement(TabsBar, { condensed: this.props.condensed }, this.props.tabs.filter(({ hidden }) => !hidden).map((tab, index) => (React.createElement(Tab, { condensed: this.props.condensed, key: index, active: activeTab === index, onClick: () => this.onTabClick(index) },
                tab.icon && React.createElement(Icon_1.default, { name: tab.icon, size: 14, color: tab.iconColor, left: true }),
                tab.name))))),
            activeChildren: this.props.tabs[activeTab].children,
        });
    }
}
exports.default = Tabs;
//# sourceMappingURL=Tabs.js.map