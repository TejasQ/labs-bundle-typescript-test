import * as React from "react";
import { DefaultProps } from "../types";
import { BrandIconName } from "./Icon.Brand";
import * as CustomIcons from "./Icon.Custom";
export declare type IconName = BrandIconName | keyof typeof CustomIcons;
export interface CommunIconProps extends DefaultProps {
    /**
     * Size
     *
     * @default 18 for regular icons, 32 for brand icons
     */
    size?: number;
    /** Icon color, specified as a hex, or a color name (info, success, warning, error) */
    color?: string;
    /**
     * Indicates that this component is left of other content, and adds an appropriate right margin.
     */
    left?: boolean;
    /**
     * Indicates that this component is right of other content, and adds an appropriate left margin.
     */
    right?: boolean;
    /**
     * Icon name.
     * For OperationalUI brand icons, use the values `OperationalUI`, `Labs`, `Components`, `Blocks` and `Visualizations`
     */
    name: IconName;
    onClick?: (e: React.MouseEvent) => void;
}
export interface OperationalUIIconProps extends CommunIconProps {
    name: "OperationalUI";
    /**
     * OperationalUI needs this prop to animate the inner circle.
     * All other icons should ignore it.
     */
    rotation?: number;
}
export interface PantheonIconProps extends CommunIconProps {
    name: "Pantheon";
    /** Use the colored version of the logo (works for `name = Pantheon` only) */
    colored?: boolean;
    color?: never;
}
export interface OtherIconProps extends CommunIconProps {
    colored?: never;
    rotation?: never;
}
export declare type IconProps = OtherIconProps | OperationalUIIconProps | PantheonIconProps;
declare const _default: import("create-emotion-styled/types/react").StyledStatelessComponent<IconProps, IconProps, Readonly<{
    font: {
        family: {
            main: string;
            code: string;
        };
        lineHeight: number;
        size: {
            title: number;
            body: number;
            small: number;
            fineprint: number;
        };
        weight: {
            regular: 400 | 600 | 500;
            medium: 400 | 600 | 500;
            bold: 400 | 600 | 500;
        };
    };
    space: {
        base: number;
        small: number;
        medium: number;
        content: number;
        element: number;
        big: number;
    };
    zIndex: {
        default: number;
        selectOptions: number;
        formFieldError: number;
        tooltip: number;
        modal: number;
        debugViewer: number;
        globalProgress: number;
    };
    color: {
        primary: string;
        disabled: string;
        warning: string;
        success: string;
        error: string;
        basic: string;
        ghost: string;
        white: string;
        black: string;
        background: {
            dark: string;
            light: string;
            lighter: string;
        };
        separators: {
            default: string;
            light: string;
        };
        text: {
            dark: string;
            default: string;
            light: string;
            lighter: string;
            lightest: string;
            action: string;
            white: string;
        };
        border: {
            default: string;
            disabled: string;
        };
        palette: string[];
    };
    shadows: {
        pressed: string;
        card: string;
        focus: string;
        popup: string;
    };
    borderRadius: number;
    compactSidebarWidth: number;
    sidebarWidth: number;
    titleHeight: number;
    deprecated: import("utils/constants/deprecatedTheme").Theme;
}>>;
export default _default;
