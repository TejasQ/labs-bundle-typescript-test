"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const React = __importStar(require("react"));
const styled_1 = __importDefault(require("../utils/styled"));
const utils_1 = require("../utils");
const ContextMenu_Item_1 = __importDefault(require("./ContextMenu.Item"));
const Container = styled_1.default("div")(({ align }) => ({
    label: "contextmenu",
    cursor: "pointer",
    position: "relative",
    width: "fit-content",
    display: "flex",
    alignItems: "center",
    justifyContent: align === "left" ? "flex-start" : "flex-end",
}));
const MenuContainer = styled_1.default("div")(({ theme, embedChildrenInMenu }) => ({
    position: "absolute",
    top: embedChildrenInMenu ? 0 : "100%",
    left: 0,
    maxHeight: 360,
    overflow: "auto",
    boxShadow: theme.shadows.popup,
    zIndex: theme.zIndex.selectOptions,
    width: `calc(100% - ${theme.space.small}px)`,
    minWidth: "fit-content",
}));
class ContextMenu extends React.Component {
    constructor() {
        super(...arguments);
        this.menu = null;
        this.toggle = () => this.setState(prevState => ({
            isOpen: !prevState.isOpen,
        }));
        this.focusElement = () => {
            if (this.menu && this.menu.querySelector('[tabindex="0"]')) {
                setTimeout(() => this.menu.querySelector('[tabindex="0"]').focus());
            }
        };
        this.onUpPress = () => ({
            focusedItemIndex: this.state.focusedItemIndex === 0 ? this.props.items.length - 1 : this.state.focusedItemIndex - 1,
        });
        this.onDownPress = () => ({
            focusedItemIndex: this.state.focusedItemIndex === this.props.items.length - 1 ? 0 : this.state.focusedItemIndex + 1,
        });
        this.handleKeyPress = ({ keyCode }) => {
            if (keyCode === utils_1.keyCodes.enter && this.props.onClick) {
                this.props.onClick(this.makeItem(this.props.items[this.state.focusedItemIndex]));
                this.setState(() => ({ isOpen: false }));
                return;
            }
            if (keyCode === utils_1.keyCodes.esc) {
                this.setState(() => ({ isOpen: false }));
                return;
            }
            if ([utils_1.keyCodes.up, utils_1.keyCodes.down].includes(keyCode)) {
                this.setState(keyCode === utils_1.keyCodes.up ? this.onUpPress : this.onDownPress);
                this.focusElement();
            }
        };
        /**
         * Preserve the public API: if users submit strings in props.items,
         * convert them into actual ContextMenuItems.
         */
        this.makeItem = (itemFromProps) => typeof itemFromProps === "string" ? { label: itemFromProps } : itemFromProps;
        this.state = {
            isOpen: false,
            focusedItemIndex: 0,
        };
    }
    componentDidUpdate(prevProps) {
        if (this.state.isOpen) {
            document.addEventListener("click", this.toggle);
        }
        else {
            document.removeEventListener("click", this.toggle);
        }
        // Reset focused item to first if items change.
        if (!lodash_1.isEqual(this.props.items, prevProps.items)) {
            this.setState(() => ({ focusedItemIndex: this.props.items.length - 1 }));
        }
    }
    render() {
        if (!this.props.items) {
            throw new Error("No array of items has been provided for the ContextMenu.");
        }
        const _a = this.props, { condensed, iconLocation, children, open, embedChildrenInMenu, align, width } = _a, props = __rest(_a, ["condensed", "iconLocation", "children", "open", "embedChildrenInMenu", "align", "width"]);
        const renderedChildren = typeof children === "function" ? children(this.state.isOpen) : children;
        return (React.createElement(Container, Object.assign({}, props, { align: align, onClick: this.toggle, onKeyUp: this.handleKeyPress }),
            renderedChildren,
            (open || this.state.isOpen) && (React.createElement(MenuContainer, { innerRef: node => (this.menu = node), embedChildrenInMenu: this.props.embedChildrenInMenu },
                embedChildrenInMenu && renderedChildren,
                props.items.map((itemFromProps, index) => {
                    const item = this.makeItem(itemFromProps);
                    const clickHandler = item.onClick ? item.onClick : this.props.onClick;
                    return (React.createElement(ContextMenu_Item_1.default, { tabIndex: this.state.focusedItemIndex === index ? 0 : -1, onClick: clickHandler && (() => clickHandler(item)), key: `contextmenu-${index}`, condensed: condensed, align: align, iconLocation: iconLocation, width: width || "100%", item: item }));
                })))));
    }
}
ContextMenu.defaultProps = {
    align: "left",
    embedChildrenInMenu: false,
};
exports.default = ContextMenu;
//# sourceMappingURL=ContextMenu.js.map