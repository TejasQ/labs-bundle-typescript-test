"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const utils_1 = require("../utils");
const styled_1 = __importDefault(require("../utils/styled"));
const Container = styled_1.default("div")(({ align, theme, onClick, condensed, width, item }) => (Object.assign({ userSelect: "none", label: "contextmenuitem", width: width || (condensed ? 160 : "100%"), whiteSpace: "nowrap", overflow: "hidden", textOverflow: "ellipsis", backgroundColor: theme.color.white, lineHeight: `${condensed ? 35 : 44}px`, padding: `0 ${theme.space.content}px`, textAlign: align, display: "flex", alignItems: "center" }, (Boolean(typeof item !== "string" && item.description)
    ? {
        borderBottom: `1px solid ${theme.color.separators.default}`,
    }
    : {}), (!!onClick
    ? {
        cursor: "pointer",
        color: theme.color.text.default,
        "&:hover": {
            backgroundColor: utils_1.darken(theme.color.white, 2),
        },
    }
    : {
        cursor: "not-allowed",
        color: theme.color.text.lightest,
    }), { "&:not(:first-child)": {
        borderTop: `1px solid ${theme.color.separators.default}`,
    }, "&:last-child": {
        paddingBottom: 2,
    } })));
const Title = styled_1.default("span") `
  font-weight: bold;
  color: ${({ theme }) => theme.color.text.dark};
`;
const Description = styled_1.default("p") `
  margin: 0;
  color: ${({ theme }) => theme.color.text.lighter};
  text-overflow: ellipsis;
  width: 100%;
  overflow: hidden;
`;
const ContentContainer = styled_1.default("div") `
  line-height: ${({ theme }) => theme.font.lineHeight};
  padding: ${({ theme }) => theme.space.content}px 0;
  width: calc(100% - ${({ theme }) => theme.space.content}px);
`;
const ContextMenuIcon = styled_1.default(Icon_1.default) `
  flex: 0 0 auto;
  margin-left: ${({ iconlocation_ }) => (iconlocation_ && iconlocation_ === "right" ? "auto" : 0)};
`;
const Content = ({ value }) => {
    // Fragments are required to hint to the compiler that these are valid types.
    if (typeof value === "string") {
        return React.createElement(React.Fragment, null, value);
    }
    if (typeof value.description === "undefined") {
        return React.createElement(React.Fragment, null, value.label);
    }
    return (React.createElement(ContentContainer, null,
        React.createElement(Title, null, value.label),
        React.createElement(Description, null, value.description)));
};
const InPlaceIcon = (props) => typeof props.item !== "string" ? (React.createElement(ContextMenuIcon, { iconlocation_: props.iconLocation, color: props.item.iconColor, left: props.iconLocation === "left" || !props.iconLocation, name: props.item.icon })) : null;
const ContextMenuItem = props => (React.createElement(Container, Object.assign({}, props, { condensed: props.condensed }),
    (!props.iconLocation || props.iconLocation === "left") && React.createElement(InPlaceIcon, Object.assign({}, props)),
    React.createElement(Content, { value: props.item }),
    props.iconLocation === "right" && React.createElement(InPlaceIcon, Object.assign({}, props))));
exports.default = ContextMenuItem;
//# sourceMappingURL=ContextMenu.Item.js.map