import * as React from "react";
import { DefaultProps } from "../types";
import { IContextMenuItem } from "./ContextMenu.Item";
export interface ContextMenuProps extends DefaultProps {
    children: React.ReactNode | ((isActive: boolean) => React.ReactNode);
    /** Specify whether the menu items are visible. Overrides internal open state that triggers on click. */
    open?: boolean;
    /** Condensed mode */
    condensed?: boolean;
    /** onClick method for all menu items */
    onClick?: (item: IContextMenuItem) => void;
    /** Handles click events anywhere outside the context menu container, including menu items. */
    onOutsideClick?: () => void;
    /** Suppresses the default behavior of closing the context menu when one of its items is clicked. */
    keepOpenOnItemClick?: boolean;
    /** Menu items */
    items: Array<string | IContextMenuItem>;
    /** Where shall we place an icon in rows? */
    iconLocation?: "left" | "right";
    /** Alignment */
    align?: "left" | "right";
    /** Custom width */
    width?: number;
    /**
     * Whether to include the click element in the context menu styling.
     * Only recommended when the click element is the same width as the context menu.
     */
    embedChildrenInMenu?: boolean;
}
export interface State {
    isOpen: boolean;
    focusedItemIndex: number;
}
declare class ContextMenu extends React.Component<ContextMenuProps, Readonly<State>> {
    private menu;
    private toggle;
    private focusElement;
    private onUpPress;
    private onDownPress;
    private handleKeyPress;
    /**
     * Preserve the public API: if users submit strings in props.items,
     * convert them into actual ContextMenuItems.
     */
    private makeItem;
    readonly state: State;
    static defaultProps: Partial<ContextMenuProps>;
    componentDidUpdate(prevProps: ContextMenuProps): void;
    render(): JSX.Element;
}
export default ContextMenu;
