"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const styled_1 = __importDefault(require("../utils/styled"));
const LabelText_1 = require("../LabelText/LabelText");
const utils_1 = require("../utils");
const constants_1 = require("../utils/constants");
const mixins_1 = require("../utils/mixins");
const Select_Filter_1 = __importDefault(require("./Select.Filter"));
const Select_Option_1 = __importDefault(require("./Select.Option"));
const displayOption = (opt) => {
    if (opt.label) {
        return opt.label;
    }
    return String(opt.value);
};
const Container = styled_1.default("div")(({ theme, color, disabled, naked }) => {
    const backgroundColor = naked ? "transparent" : constants_1.expandColor(theme, color) || theme.color.white;
    const dropdownArrowWidth = 56;
    return {
        backgroundColor,
        label: "select",
        position: "relative",
        display: "flex",
        alignItems: "center",
        padding: `${theme.space.small}px ${dropdownArrowWidth}px ${theme.space.small}px ${theme.space.content}px`,
        borderRadius: 4,
        width: "fit-content",
        minWidth: !naked ? 240 : "none",
        minHeight: 20,
        border: naked ? 0 : "1px solid",
        borderColor: theme.color.border.default,
        opacity: disabled ? 0.5 : 1,
        cursor: "pointer",
        color: utils_1.readableTextColor(backgroundColor, ["black", "white"]),
        outline: "none",
        pointerEvents: disabled ? "none" : "all",
        // downward caret.
        "&::after": {
            content: "''",
            position: "absolute",
            top: "50%",
            right: theme.space.small,
            width: 0,
            height: 0,
            border: "4px solid transparent",
            borderTopColor: theme.color.border.default,
            transform: "translateY(calc(-50% + 2px))",
        },
        "&:focus": !naked &&
            mixins_1.inputFocus({
                theme,
            }),
    };
});
const DisplayValue = styled_1.default("div")(({ theme, isPlaceholder }) => {
    if (isPlaceholder) {
        return {
            color: theme.color.text.lightest,
        };
    }
    return {
        color: "currentColor",
    };
});
const Options = styled_1.default("div")({
    position: "absolute",
    /**
     * Push it down 6px so it doesn't overlap with the focus shadow,
     * and there's a comfortable 2px gap.
     */
    top: "calc(100% + 6px)",
    left: 0,
    minWidth: "100%",
    overflow: "hidden",
    borderRadius: 4,
    opacity: 0,
    transform: "translateY(-10px)",
    animation: `${utils_1.floatIn} .15s forwards ease,
    ${utils_1.resetTransform} .15s forwards ease`,
}, ({ theme }) => ({
    boxShadow: "0 3px 12px rgba(0, 0, 0, .14)",
    zIndex: theme.zIndex.selectOptions,
}));
const OptionsList = styled_1.default("div")({
    maxHeight: 200,
    overflow: "auto",
});
class Select extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            open: false,
            updating: false,
            search: "",
        };
        // This implements "click outside to close" behavior
        this.handleClick = (ev) => {
            // if we're clicking on the Select itself,
            if (this.containerNode && this.containerNode.contains(ev.target)) {
                return;
            }
            // if we're clicking outside,
            this.close();
        };
        this.handleEsc = (e) => {
            if (e.keyCode === utils_1.keyCodes.esc) {
                this.close();
            }
        };
    }
    componentDidUpdate() {
        if (this.state.open) {
            document.addEventListener("click", this.handleClick);
            document.addEventListener("keyup", this.handleEsc);
        }
        else {
            document.removeEventListener("click", this.handleClick);
            document.removeEventListener("keyup", this.handleEsc);
        }
    }
    getDisplayValue() {
        const { placeholder } = this.props;
        if (!this.props.value) {
            return placeholder;
        }
        if (!Array.isArray(this.props.value)) {
            const displayedOption = this.props.options.filter(option => option.value === this.props.value)[0];
            return displayedOption ? displayOption(displayedOption) : placeholder;
        }
        const listDisplay = this.props.options
            .map(option => (this.props.value.indexOf(option.value) > -1 ? displayOption(option) : null))
            .filter(a => !!a)
            .join(", ");
        return listDisplay === "" ? this.props.placeholder || "" : listDisplay;
    }
    selectOption(option) {
        const { onChange } = this.props;
        if (!onChange) {
            return;
        }
        if (!Array.isArray(this.props.value)) {
            this.setState({
                open: false,
            });
            onChange(this.props.value === option.value ? null : option.value);
            return;
        }
        const optionIndex = this.props.value.indexOf(option.value);
        if (optionIndex < 0) {
            onChange([...this.props.value, option.value], option.value);
        }
        else {
            onChange([...this.props.value.slice(0, optionIndex), ...this.props.value.slice(optionIndex + 1)], option.value);
        }
    }
    isOptionSelected(option) {
        if (!Array.isArray(this.props.value)) {
            return this.props.value === option.value;
        }
        return this.props.value.indexOf(option.value) > -1;
    }
    close() {
        this.setState(() => ({
            open: false,
        }));
    }
    render() {
        const _a = this.props, { color, disabled, naked, value, options, filterable, label, onChange } = _a, props = __rest(_a, ["color", "disabled", "naked", "value", "options", "filterable", "label", "onChange"]);
        const { open, search } = this.state;
        const selectWithoutLabel = (React.createElement(Container, Object.assign({}, props, { color: color, disabled: disabled, naked: naked, innerRef: (containerNode) => (this.containerNode = containerNode), role: "listbox", tabIndex: -2, onClick: () => {
                this.setState(prevState => ({
                    open: !prevState.open,
                }));
            } }),
            React.createElement(DisplayValue, { isPlaceholder: Array.isArray(value) ? value.length === 0 : !value }, this.getDisplayValue()),
            options.length &&
                open && (React.createElement(Options, null,
                filterable && (React.createElement(Select_Filter_1.default, { onChange: (filterValue) => {
                        this.setState({
                            search: filterValue,
                        });
                    } })),
                React.createElement(OptionsList, null, options.map((option) => (option.label || String(option.value)).match(RegExp(search)) && (React.createElement(Select_Option_1.default, { key: String(option.value), onClick: () => {
                        this.selectOption(option);
                    }, selected: this.isOptionSelected(option) }, option.label || String(option.value)))))))));
        return label ? (React.createElement(mixins_1.Label, Object.assign({}, props),
            React.createElement(LabelText_1.LabelText, null, label),
            selectWithoutLabel)) : (selectWithoutLabel);
    }
}
Select.defaultProps = {
    placeholder: "No entries selected",
    naked: false,
};
exports.default = Select;
//# sourceMappingURL=Select.js.map