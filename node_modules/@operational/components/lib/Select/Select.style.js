"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const constants_1 = require("../utils/constants");
const mixins = __importStar(require("../utils/mixins"));
const styled_1 = __importDefault(require("../utils/styled"));
const Container = styled_1.default("div")(({ theme, color, disabled }) => {
    const backgroundColor = constants_1.deprecatedExpandColor(theme.deprecated, color) || theme.deprecated.colors.white;
    return {
        backgroundColor,
        label: "select",
        position: "relative",
        display: "flex",
        alignItems: "center",
        padding: `${theme.deprecated.spacing / 2}px ${(theme.deprecated.spacing * 2) / 3 + 40}px ${theme.deprecated
            .spacing / 2}px ${(theme.deprecated.spacing * 2) / 3}px `,
        borderRadius: 4,
        width: "fit-content",
        minWidth: 240,
        minHeight: 20,
        border: "1px solid",
        borderColor: theme.deprecated.colors.inputBorder,
        opacity: disabled ? 0.5 : 1,
        cursor: "pointer",
        color: utils_1.readableTextColor(backgroundColor, ["black", "white"]),
        outline: "none",
        pointerEvents: disabled ? "none" : "all",
        // downward caret.
        "&::after": {
            content: "''",
            position: "absolute",
            top: "50%",
            right: theme.deprecated.spacing / 2,
            width: 0,
            height: 0,
            border: "4px solid transparent",
            borderTopColor: theme.deprecated.colors.gray,
            transform: "translateY(calc(-50% + 2px))",
        },
        "&:focus": mixins.inputFocus({
            theme,
        }),
    };
});
exports.Container = Container;
const DisplayValue = styled_1.default("div")(({ theme, isPlaceholder }) => ({
    color: isPlaceholder ? theme.deprecated.colors.gray : theme.deprecated.colors.black,
}));
exports.DisplayValue = DisplayValue;
const Options = styled_1.default("div")({
    position: "absolute",
    // Push it down 6px so it doesn't overlap with the focus shadow,
    // and there's a comfortable 2px gap.
    top: "calc(100% + 6px)",
    left: 0,
    width: "100%",
    overflow: "hidden",
    borderRadius: 4,
    opacity: 0,
    transform: "translateY(-10px)",
    animation: `${utils_1.floatIn} .15s forwards ease,
    ${utils_1.resetTransform} .15s forwards ease`,
}, ({ theme }) => ({
    boxShadow: theme.deprecated.shadows.popup,
    zIndex: theme.deprecated.baseZIndex + 300,
}));
exports.Options = Options;
const OptionsList = styled_1.default("div")(({ theme }) => ({
    // whole number + 3/4 ratio here ensures options don't get cut off
    maxHeight: theme.deprecated.spacing * 12.75,
    overflow: "auto",
}));
exports.OptionsList = OptionsList;
//# sourceMappingURL=Select.style.js.map