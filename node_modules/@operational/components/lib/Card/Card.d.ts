import * as React from "react";
import { Tab } from "../Internals/Tabs";
import { DefaultProps } from "../types";
export interface BaseProps extends DefaultProps {
    /** Component containing buttons/links/actions assigned to the card */
    action?: React.ReactNode;
    /** Card tabs */
    tabs?: Tab[];
    /** Active tab name */
    activeTabName?: string;
    /** Callback fired on tab change */
    onTabChange?: (newTabName: string) => void;
    /**
     * Fill all the height of the parent.
     */
    fullSize?: boolean;
}
export interface CardPropsWithChildrenOrData<T extends {} = {}> extends BaseProps {
    /** Any object to show. The key is the title of the data. */
    data?: T;
    /**  A function to format keys of `data` */
    keyFormatter?: (key: Extract<keyof T, string>) => string;
    /** A key-value object to format values of `data`. */
    valueFormatters?: {
        [P in Extract<keyof T, string>]?: (value: T[P]) => React.ReactNode;
    };
    /** Sort method for keys. By default, they will be sorted alphabetically as regular JavaScript strings */
    sortKeys?: (a: keyof T, b: keyof T) => number;
    /** An ordered array to pick only some keys to display  */
    keys?: Array<Extract<keyof T, string>>;
    /** Title of the card */
    title?: React.ReactNode;
    /** React children */
    children?: React.ReactNode;
    /** Card sections */
    sections?: never;
    /** Section stacking */
    stackSections?: never;
}
export interface CardPropsWithSections extends BaseProps {
    /** Any object to show. The key is the title of the data. */
    data?: never;
    /**  A function to format keys of `data` */
    keyFormatter?: never;
    /** A key-value object to format values of `data`. */
    valueFormatters?: never;
    /** An ordered array to pick only some keys to display  */
    keys?: never;
    /** Title of the card */
    title?: React.ReactNode;
    /** React children */
    children?: never;
    /** Card sections */
    sections?: React.ReactNode;
    /** Section stacking */
    stackSections?: "horizontal" | "vertical";
}
export interface CardPropsWithTabs extends BaseProps {
    /** Any object to show. The key is the title of the data. */
    data?: never;
    /**  A function to format keys of `data` */
    keyFormatter?: never;
    /** A key-value object to format values of `data`. */
    valueFormatters?: never;
    /** An ordered array to pick only some keys to display  */
    keys?: never;
    /** Card sections */
    sections?: never;
    /** Section stacking */
    stackSections?: never;
    /** React children */
    children?: never;
    /** Title of the card */
    title?: never;
    /**
     * List of tabs
     * This will disable any children to render `tabs[i].component` instead
     */
    tabs: Tab[];
    /**
     * Active tab name
     *
     * If not specified, active tab is controlled by internal state.
     */
    activeTabName?: string;
    /**
     * Send the active name tab on each tab change (in lowercase).
     */
    onTabChange?: (name: string) => void;
}
export declare type CardProps<T extends {} = {}> = CardPropsWithChildrenOrData<T> | CardPropsWithSections | CardPropsWithTabs;
export interface State {
    activeTab: number;
}
declare function Card<T extends {}>(props: CardProps<T>): JSX.Element;
export default Card;
