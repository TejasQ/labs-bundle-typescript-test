"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const utils_1 = require("../utils");
const constants_1 = require("../utils/constants");
const styled_1 = __importDefault(require("../utils/styled"));
const Container = styled_1.default("div")({
    label: "breakdown",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative",
    maxWidth: 300,
}, ({ theme, onClick }) => (Object.assign({ padding: `${(theme.deprecated.spacing * 3) / 4}px 0` }, (onClick
    ? {
        cursor: "pointer",
        "&:hover": {
            backgroundColor: "rgba(0, 0, 0, 0.01)",
        },
    }
    : {}), { background: theme.deprecated.colors.white, ":not(:first-child)": {
        borderTop: `1px solid ${theme.deprecated.colors.separator}`,
    } })));
const Content = styled_1.default("div")({
    width: "100%",
});
const Label = styled_1.default("label")({
    display: "block",
}, ({ theme }) => ({
    marginBottom: theme.deprecated.spacing / 4,
    fontSize: theme.deprecated.typography.small.fontSize,
}));
const Bar = styled_1.default("div")({
    position: "relative",
    width: "100%",
    fontSize: 12,
    overflow: "hidden",
    "& > span": {
        position: "relative",
        padding: 2,
    },
    ":before": {
        content: "' '",
        position: "absolute",
        top: 0,
        left: 0,
        zIndex: 0,
        display: "block",
        height: "100%",
        pointerEvents: "none",
    },
}, ({ theme, fill_, color }) => {
    const backgroundColor = constants_1.deprecatedExpandColor(theme.deprecated, color) || theme.deprecated.colors.info;
    return {
        padding: `${theme.deprecated.spacing / 4}px ${theme.deprecated.spacing / 2}px`,
        backgroundColor: theme.deprecated.colors.lightGray,
        "> span": {
            color: theme.deprecated.colors.gray,
            fontSize: 12,
            position: "relative",
            top: 1,
            fontWeight: theme.font.weight.regular,
        },
        ":before": {
            backgroundColor: utils_1.setBrightness(backgroundColor, 155),
            transition: "all 0.3s ease-in-out",
            width: `${fill_ * 100}%`,
        },
    };
});
const Number = styled_1.default("div")({
    height: "100%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
}, ({ theme }) => (Object.assign({}, theme.deprecated.typography.heading1, { flex: `0 0 ${theme.deprecated.spacing * 2.5}px`, color: theme.deprecated.colors.lightGray })));
const Span = styled_1.default("span")({ fontFeatureSettings: "'tnum'" });
const Breakdown = (_a) => {
    var { number, color, fill, label, children } = _a, props = __rest(_a, ["number", "color", "fill", "label", "children"]);
    return (React.createElement(Container, Object.assign({}, props),
        React.createElement(Number, null, number),
        React.createElement(Content, null,
            React.createElement(Label, null, children),
            React.createElement(Bar, { color: color, fill_: fill },
                React.createElement(Span, null, label)))));
};
exports.default = Breakdown;
//# sourceMappingURL=Breakdown.js.map