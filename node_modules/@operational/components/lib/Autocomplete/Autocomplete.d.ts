import * as React from "react";
import { IContextMenuItem as Item } from "../ContextMenu/ContextMenu.Item";
import { InputProps } from "../Input/Input";
export interface AutocompleteProps<TValue> {
    /**
     * Label text, rendering the input inside a tag if specified.
     * The `labelId` props is responsible for specifying for and id attributes.
     */
    label?: string;
    /**
     * An Icon to append to each result
     */
    resultIcon?: Item["icon"];
    /**
     * A hint to the user.
     */
    hint?: InputProps["hint"];
    /**
     * Should the input fill its container?
     */
    fullWidth?: boolean;
    /**
     * A search can show a loading indicator.
     */
    loading?: boolean;
    /**
     * Message to display when there are no results.
     */
    noResultsMessage?: string;
    /**
     * Called when a result is selected.
     */
    onResultClick: (item: Item<TValue>) => void;
    /**
     * Called on search input change.
     */
    onChange: (search: string) => void;
    /**
     * Search results
     */
    results?: Array<Item<TValue>>;
    /**
     * The value of the Search
     */
    value: string;
    /**
     * Clear the field
     */
    clear?: InputProps["clear"];
    /**
     * A placeholder for the input field
     */
    placeholder?: InputProps["placeholder"];
    /**
     * Is a result selected?
     */
    selectedResult?: Item<TValue>;
}
declare const initialState: {
    isContextMenuOpen: boolean;
};
export declare class Autocomplete<TValue> extends React.Component<AutocompleteProps<TValue>, Readonly<typeof initialState>> {
    state: {
        isContextMenuOpen: boolean;
    };
    private openContextMenu;
    private closeContextMenu;
    static defaultProps: {
        noResultsMessage: string;
    };
    render(): JSX.Element;
}
export default Autocomplete;
