"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const constants_1 = require("../utils/constants");
const styled_1 = __importDefault(require("../utils/styled"));
const circleSize = 24;
const StepContent = styled_1.default("div") `
  height: 100%;
  width: 100%;
`;
const Steps = styled_1.default("ul") `
  display: flex;
  margin: 0 0 ${({ theme }) => theme.space.big}px;
  padding: 0;
  list-style-type: none;
  justify-content: space-between;
`;
const Step = styled_1.default("li") `
  display: flex;
  align-items: center;
    font-weight: ${({ theme, isActive }) => (isActive ? "bold" : theme.font.weight.regular)};
  flex: 1 0 auto;
  font-size: ${({ theme }) => theme.font.size.body}px;
  color: ${({ theme, isActive }) => (isActive ? theme.color.text.dark : theme.color.text.lighter)};
  cursor: pointer;

  /* Number with circles */
  ::before {
    content: "${({ number }) => number}";
    width: ${circleSize}px;
    height: ${circleSize}px;
    flex: 0 0 ${circleSize}px;
    line-height: 23px;
    text-align: center;
    font-weight: ${({ theme }) => theme.font.weight.bold};
    font-size: ${({ theme }) => theme.font.size.body}px;
    box-sizing: border-box;
    background: ${({ theme, color, isActive }) => (isActive ? constants_1.expandColor(theme, color) : theme.color.border.default)};
    margin-right: ${({ theme }) => theme.space.small}px;
    border-radius: 50%;
    color: white;
  }

  :not(:last-child)::after {
      content: '';
      width: 100%;
      margin: 0 16px;
      height: 1px;
      background: ${({ theme }) => theme.color.separators.default};
      display: block;
  }

  :last-child {
      flex: 0 1 0;
  }

`;
const StepLabel = styled_1.default("div") `
  min-width: fit-content;
  white-space: pre;
  max-width: 100%;
  text-overflow: ellipsis;
  overflow: hidden;
`;
const Stepper = props => {
    const { steps, stepColor, onStepChange, activeSlideIndex } = props;
    return (React.createElement(React.Fragment, null,
        React.createElement(Steps, null, steps.map(({ title }, index) => (React.createElement(Step, { key: index, isActive: activeSlideIndex === index, number: index + 1, color: stepColor, onClick: () => {
                if (onStepChange) {
                    onStepChange(index);
                }
            } },
            React.createElement(StepLabel, null, title))))),
        React.createElement(StepContent, null, steps[activeSlideIndex].content)));
};
Stepper.defaultProps = {
    stepColor: "primary",
    activeSlideIndex: 0,
};
exports.default = Stepper;
//# sourceMappingURL=Stepper.js.map